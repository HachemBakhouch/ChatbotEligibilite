import json
import os
import re
from datetime import datetime


class EligibilityEvaluator:
    """√âvalue l'√©ligibilit√© des utilisateurs bas√©e sur les r√®gles de l'arbre d√©cisionnel"""

    def __init__(self, rules_file=None):
        """Initialiser avec un fichier de r√®gles optionnel"""
        # Cr√©er le r√©pertoire rules s'il n'existe pas
        if not os.path.exists("../rules"):
            os.makedirs("../rules")

        self.rules_file = rules_file or os.path.join(
            os.path.dirname(os.path.dirname(__file__)),
            "rules",
            "eligibility_rules.json",
        )
        self.rules = self._load_rules()
        self.user_data = {}  # Stocker temporairement les donn√©es utilisateur

    def _load_rules(self):
        """Charger les r√®gles depuis le fichier JSON"""
        try:
            # V√©rifier si le fichier existe
            if not os.path.exists(self.rules_file):
                # Cr√©er le fichier avec les r√®gles par d√©faut
                os.makedirs(os.path.dirname(self.rules_file), exist_ok=True)
                with open(self.rules_file, "w", encoding="utf-8") as f:
                    json.dump(
                        self._get_default_rules(), f, ensure_ascii=False, indent=2
                    )

            with open(
                self.rules_file, "r", encoding="utf-8-sig"
            ) as f:  # Utiliser utf-8-sig pour g√©rer le BOM
                return json.load(f)
        except Exception as e:
            print(f"Erreur lors du chargement des r√®gles: {str(e)}")
            # Revenir aux r√®gles par d√©faut
            return self._get_default_rules()

    def _get_default_rules(self):
        """Retourner les r√®gles par d√©faut si le fichier ne peut pas √™tre charg√©"""
        return {
            "states": {
                "initial": {
                    "next": "consent",
                    "message": "Bonjour et ravi de te voir ici ! Je suis CODEE, ton assistant intelligent pr√™t √† t'aider. üöÄ Je suis l√† pour toi !",
                },
                "consent": {
                    "next": "age_verification",
                    "message": "Avant de commencer, je dois recueillir quelques informations personnelles pour d√©terminer votre √©ligibilit√©. Acceptez-vous que vos donn√©es soient trait√©es dans le cadre de cette √©valuation ?",
                    "responses": {
                        "yes": {
                            "next": "age_verification",
                            "message": "Pour mieux t'orienter, peux tu me communiquer ton √¢ge ? Cela m'aidera √† te fournir des informations adapt√©es √† ton profil. üòä",
                        },
                        "no": {
                            "next": "end",
                            "message": "Je comprends. Sans ces informations, je ne peux pas d√©terminer votre √©ligibilit√©. N'h√©sitez pas √† revenir si vous changez d'avis.",
                            "is_final": True,
                        },
                    },
                },
                "age_verification": {
                    "next": "rsa_verification",
                    "message": "Quel √¢ge avez-vous ?",
                    "process": "extract_age",
                    "transitions": [
                        {
                            "condition": "age < 16",
                            "next": "not_eligible_age",
                            "message": "Je suis d√©sol√©, mais vous devez avoir au moins 16 ans pour √™tre √©ligible aux programmes.",
                            "is_final": True,
                            "eligibility_result": "Non √©ligible (√¢ge)",
                        },
                        {
                            "condition": "age >= 16 and age <= 25.5",
                            "next": "rsa_verification_young",
                            "message": "√ätes-vous b√©n√©ficiaire du RSA ?",
                        },
                        {
                            "condition": "age > 25.5 and age < 62",
                            "next": "rsa_verification_adult",
                            "message": "√ätes-vous b√©n√©ficiaire du RSA ?",
                        },
                        {
                            "condition": "age >= 62",
                            "next": "not_eligible_age",
                            "message": "Je suis d√©sol√©, mais vous devez avoir moins de 62 ans pour √™tre √©ligible aux programmes.",
                            "is_final": True,
                            "eligibility_result": "Non √©ligible (√¢ge)",
                        },
                    ],
                },
                "rsa_verification": {
                    "next": "schooling_verification",
                    "message": "√ätes-vous b√©n√©ficiaire du RSA ?",
                    "responses": {
                        "yes": {
                            "next": "schooling_verification_young_rsa",
                            "message": "D'accord, tu es scolaris√©(e)?",
                        },
                        "no": {
                            "next": "schooling_verification_young_no_rsa",
                            "message": "D'accord, tu es scolaris√©(e)?",
                        },
                    },
                },
                "rsa_verification_young": {
                    "next": "schooling_verification_young",
                    "message": "√ätes-vous b√©n√©ficiaire du RSA ?",
                    "responses": {
                        "yes": {
                            "next": "schooling_verification_young_rsa",
                            "message": "D'accord, tu es scolaris√©(e)?",
                        },
                        "no": {
                            "next": "schooling_verification_young_no_rsa",
                            "message": "D'accord, tu es scolaris√©(e)?",
                        },
                    },
                },
                "schooling_verification_young_rsa": {
                    "next": "city_verification_young_rsa",
                    "message": "D'accord, tu es scolaris√©(e)?",
                    "responses": {
                        "yes": {
                            "next": "city_verification_young_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                        },
                        "no": {
                            "next": "city_verification_young_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                        },
                    },
                },
                "city_verification_young_rsa": {
                    "next": "result",
                    "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                    "process": "extract_city",
                    "transitions": [
                        {
                            "condition": "city in ['saint-denis', 'stains', 'pierrefitte']",
                            "next": "eligible_ali",
                            "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par l'agence locale d'insertion de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. Cliquer ici pour prendre un rendez vous avec un conseiller",
                            "is_final": True,
                            "eligibility_result": "ALI",
                        },
                        {
                            "condition": "True",
                            "next": "not_eligible_city",
                            "message": "Important : Mon p√©rim√®tre d'action est limit√© √† la Plaine Commune et au d√©partement de la Seine-Saint-Denis (93). Pour ton cas, je te recommande de contacter les services de ta ville ou de ton d√©partement.",
                            "is_final": True,
                            "eligibility_result": "Non √©ligible (ville)",
                        },
                    ],
                },
                "schooling_verification_young_no_rsa": {
                    "next": "city_verification_young_no_rsa",
                    "message": "D'accord, tu es scolaris√©(e)?D'accord, tu es scolaris√©(e)?",
                    "responses": {
                        "yes": {
                            "next": "not_eligible_schooling",
                            "message": "Malheureusement, tu n‚Äôes pas √©ligible √† un accompagnement pour le moment, tant que tu es encore scolaris√©. üéì Cependant, d√®s que tu auras termin√© tes √©tudes, tu pourras b√©n√©ficier de nos services d‚Äôaccompagnement pour t'aider dans ta recherche d‚Äôemploi et ton insertion professionnelle. En attendant, si tu as des questions ou besoin de conseils, tu peux appeler CODEE au¬† 0148131320. A bient√¥t",
                            "is_final": True,
                            "eligibility_result": "Non √©ligible (scolarisation)",
                        },
                        "no": {
                            "next": "city_verification_young_no_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                        },
                    },
                },
                "city_verification_young_no_rsa": {
                    "next": "result",
                    "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                    "process": "extract_city",
                    "transitions": [
                        {
                            "condition": "city in ['saint-denis', 'pierrefitte', 'saint-ouen', 'epinay', '√©pinay', 'villetaneuse', 'ile-saint-denis', '√Æle-saint-denis']",
                            "next": "eligible_ml",
                            "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par la mission locale de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. Cliquer ici pour prendre un rendez vous avec un conseiller",
                            "is_final": True,
                            "eligibility_result": "ML",
                        },
                        {
                            "condition": "True",
                            "next": "not_eligible_city",
                            "message": "Important : Mon p√©rim√®tre d'action est limit√© √† la Plaine Commune et au d√©partement de la Seine-Saint-Denis (93). Pour ton cas, je te recommande de contacter les services de ta ville ou de ton d√©partement.",
                            "is_final": True,
                            "eligibility_result": "Non √©ligible (ville)",
                        },
                    ],
                },
                "rsa_verification_adult": {
                    "next": "schooling_verification_adult",
                    "message": "√ätes-vous b√©n√©ficiaire du RSA ?",
                    "responses": {
                        "yes": {
                            "next": "schooling_verification_adult_rsa",
                            "message": "D'accord, tu es scolaris√©(e)?",
                        },
                        "no": {
                            "next": "schooling_verification_adult_no_rsa",
                            "message": "D'accord, tu es scolaris√©(e)?",
                        },
                    },
                },
                "schooling_verification_adult_rsa": {
                    "next": "city_verification_adult_rsa",
                    "message": "D'accord, tu es scolaris√©(e)?",
                    "responses": {
                        "yes": {
                            "next": "city_verification_adult_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                        },
                        "no": {
                            "next": "city_verification_adult_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                        },
                    },
                },
                "city_verification_adult_rsa": {
                    "next": "result",
                    "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                    "process": "extract_city",
                    "transitions": [
                        {
                            "condition": "city in ['saint-denis', 'stains', 'pierrefitte']",
                            "next": "eligible_ali",
                            "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par l'agence locale d'insertion de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. Cliquer ici pour prendre un rendez vous avec un conseiller",
                            "is_final": True,
                            "eligibility_result": "ALI",
                        },
                        {
                            "condition": "True",
                            "next": "not_eligible_city",
                            "message": "Important : Mon p√©rim√®tre d'action est limit√© √† la Plaine Commune et au d√©partement de la Seine-Saint-Denis (93). Pour ton cas, je te recommande de contacter les services de ta ville ou de ton d√©partement.",
                            "is_final": True,
                            "eligibility_result": "Non √©ligible (ville)",
                        },
                    ],
                },
                "schooling_verification_adult_no_rsa": {
                    "next": "city_verification_adult_no_rsa",
                    "message": "D'accord, tu es scolaris√©(e)?",
                    "responses": {
                        "yes": {
                            "next": "city_verification_adult_no_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                        },
                        "no": {
                            "next": "city_verification_adult_no_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                        },
                    },
                },
                "city_verification_adult_no_rsa": {
                    "next": "result",
                    "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                    "process": "extract_city",
                    "transitions": [
                        {
                            "condition": "city in ['aubervilliers', 'epinay-sur-seine', '√©pinay-sur-seine', 'ile-saint-denis', '√Æle-saint-denis', 'la-courneuve', 'la courneuve', 'pierrefitte', 'saint-denis', 'saint-ouen', 'stains', 'villetaneuse']",
                            "next": "eligible_plie",
                            "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par le PLIE de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. Cliquer ici pour prendre un rendez vous avec un conseiller",
                            "is_final": True,
                            "eligibility_result": "PLIE",
                        },
                        {
                            "condition": "True",
                            "next": "not_eligible_city",
                            "message": "Important : Mon p√©rim√®tre d'action est limit√© √† la Plaine Commune et au d√©partement de la Seine-Saint-Denis (93). Pour ton cas, je te recommande de contacter les services de ta ville ou de ton d√©partement.",
                            "is_final": True,
                            "eligibility_result": "Non √©ligible (ville)",
                        },
                    ],
                },
                "eligible_ali": {
                    "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par l'agence locale d'insertion de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. Cliquer ici pour prendre un rendez vous avec un conseiller",
                    "is_final": True,
                    "eligibility_result": "ALI",
                },
                "eligible_ml": {
                    "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par la mission locale de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. Cliquer ici pour prendre un rendez vous avec un conseiller",
                    "is_final": True,
                    "eligibility_result": "ML",
                },
                "eligible_plie": {
                    "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par le PLIE de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. Cliquer ici pour prendre un rendez vous avec un conseiller",
                    "is_final": True,
                    "eligibility_result": "PLIE",
                },
                "not_eligible_age": {
                    "message": "Je suis d√©sol√©, mais vous ne remplissez pas les crit√®res d'√¢ge pour √™tre √©ligible aux programmes.",
                    "is_final": True,
                    "eligibility_result": "Non √©ligible (√¢ge)",
                },
                "not_eligible_city": {
                    "message": "Important : Mon p√©rim√®tre d'action est limit√© √† la Plaine Commune et au d√©partement de la Seine-Saint-Denis (93). Pour ton cas, je te recommande de contacter les services de ta ville ou de ton d√©partement.",
                    "is_final": True,
                    "eligibility_result": "Non √©ligible (ville)",
                },
                "not_eligible_schooling": {
                    "message": "Je suis d√©sol√©, mais vous n'√™tes pas √©ligible aux programmes avec votre statut de scolarisation actuel.",
                    "is_final": True,
                    "eligibility_result": "Non √©ligible (scolarisation)",
                },
            }
        }

    def evaluate(self, conversation_id, current_state, nlp_data=None, user_data=None):
        """
        √âvaluer l'√©tat actuel et d√©terminer la prochaine √©tape

        Args:
            conversation_id (str): ID de la conversation
            current_state (str): √âtat actuel dans l'arbre d√©cisionnel
            nlp_data (dict): R√©sultats du traitement NLP
            user_data (dict): Donn√©es utilisateur collect√©es jusqu'√† pr√©sent

        Returns:
            dict: Informations sur la prochaine √©tape
        """
        print(
            f"\nEvaluating - conversation_id: {conversation_id}, current_state: {current_state}"
        )
        if nlp_data:
            print(f"NLP data: {json.dumps(nlp_data)}")
        if user_data:
            print(f"User data: {json.dumps(user_data)}")

        # Debug: Afficher l'√©tat actuel des donn√©es utilisateur
        if conversation_id in self.user_data:
            print(
                f"DEBUG - Current user data: {json.dumps(self.user_data[conversation_id])}"
            )

        # Mettre √† jour les donn√©es utilisateur
        if user_data:
            if conversation_id not in self.user_data:
                self.user_data[conversation_id] = {}
            self.user_data[conversation_id].update(user_data)

        # Obtenir la d√©finition de l'√©tat actuel
        state_def = self.rules["states"].get(current_state)

        if not state_def:
            print(f"√âtat non reconnu dans l'arbre de d√©cision: {current_state}")
            return {
                "next_state": "error",
                "message": "√âtat non reconnu dans l'arbre de d√©cision.",
                "is_final": False,
            }

        print(f"√âtat actuel: {current_state}, d√©finition: {json.dumps(state_def)}")

        # Traiter la logique d'√©tat sp√©ciale si n√©cessaire
        if "process" in state_def:
            process_type = state_def["process"]
            print(f"Traitement sp√©cial requis: {process_type}")

            # Utiliser √† la fois nlp_data et user_data pour le traitement
            combined_data = {}
            if user_data:
                combined_data.update(user_data)

            # Le traitement peut ajouter de nouvelles donn√©es
            process_result = self._process_special_logic(
                process_type, nlp_data, combined_data
            )

            print(f"R√©sultats du traitement: {json.dumps(process_result)}")

            # V√©rifier si le traitement a r√©ussi √† extraire l'information requise
            if process_type == "extract_age" and "age" not in process_result:
                # L'√¢ge n'a pas pu √™tre extrait, redemander
                return {
                    "next_state": current_state,  # Rester dans le m√™me √©tat
                    "message": "Je n'ai pas compris votre √¢ge. Pourriez-vous me dire quel √¢ge vous avez, en chiffres (par exemple 25) ou en lettres (par exemple trente ans) ?",
                    "is_final": False,
                }
            elif process_type == "extract_city" and "city" not in process_result:
                # La ville n'a pas pu √™tre extraite, redemander
                return {
                    "next_state": current_state,  # Rester dans le m√™me √©tat
                    "message": "Je n'ai pas reconnu cette ville. Pourriez-vous pr√©ciser dans quelle ville vous habitez ? Par exemple : Saint-Denis, Stains, Pierrefitte, ou indiquer le code postal comme 93200.",
                    "is_final": False,
                }

            # Mettre √† jour les donn√©es utilisateur avec les r√©sultats du traitement
            if conversation_id not in self.user_data:
                self.user_data[conversation_id] = {}
            self.user_data[conversation_id].update(process_result)

            # Si user_data est fourni, mettre √† jour combined_data
            combined_data.update(process_result)

            # G√©rer les transitions bas√©es sur le traitement
            if "transitions" in state_def:
                print(f"√âvaluation des transitions...")
                for transition in state_def["transitions"]:
                    condition = transition["condition"]
                    print(f"V√©rification de la condition: {condition}")

                    # √âvaluer la condition avec les donn√©es combin√©es
                    if self._evaluate_condition(condition, combined_data):
                        print(
                            f"Condition satisfaite! Transition vers: {transition['next']}"
                        )
                        return {
                            "next_state": transition["next"],
                            "message": transition["message"],
                            "is_final": transition.get("is_final", False),
                            "eligibility_result": transition.get("eligibility_result"),
                        }
                    else:
                        print(f"Condition non satisfaite.")

        # V√©rification RSA dans les √©tats concern√©s
        if "rsa_verification" in current_state:
            text = nlp_data.get("text", "").lower() if nlp_data else ""
            intent = nlp_data.get("intent", "").lower() if nlp_data else ""
            rsa_detected = False

            # D√©tection explicite de la r√©ponse "non"
            if "non" in text or intent == "no":
                # Forcer RSA √† False
                if conversation_id not in self.user_data:
                    self.user_data[conversation_id] = {}
                self.user_data[conversation_id]["rsa"] = False
                rsa_detected = True

                # Forcer la transition vers l'√©tat appropri√©
                if current_state == "rsa_verification_young":
                    print(
                        "*** Transition forc√©e vers schooling_verification_young_no_rsa ***"
                    )
                    return {
                        "next_state": "schooling_verification_young_no_rsa",
                        "message": "D'accord, tu es scolaris√©(e)?",
                        "is_final": False,
                    }
            # D√©tection explicite de la r√©ponse "oui"
            elif "oui" in text or intent == "yes" or "d'accord" in text or "ok" in text:
                # Forcer RSA √† True
                if conversation_id not in self.user_data:
                    self.user_data[conversation_id] = {}
                self.user_data[conversation_id]["rsa"] = True
                rsa_detected = True

                # Forcer la transition vers l'√©tat appropri√©
                if current_state == "rsa_verification_young":
                    print(
                        "*** Transition forc√©e vers schooling_verification_young_rsa ***"
                    )
                    return {
                        "next_state": "schooling_verification_young_rsa",
                        "message": "D'accord, tu es scolaris√©(e)?",
                        "is_final": False,
                    }

            # Si les donn√©es RSA sont d√©j√† pr√©sentes mais pas d√©tect√©es dans le texte
            if not rsa_detected and "rsa" in self.user_data.get(conversation_id, {}):
                rsa_value = self.user_data[conversation_id]["rsa"]
                print(f"*** Utilisation de la valeur RSA existante: {rsa_value} ***")

                if current_state == "rsa_verification_young":
                    next_state = (
                        "schooling_verification_young_rsa"
                        if rsa_value
                        else "schooling_verification_young_no_rsa"
                    )
                    return {
                        "next_state": next_state,
                        "message": "D'accord, tu es scolaris√©(e)?",
                        "is_final": False,
                    }

        # G√©rer les r√©ponses directes si pr√©sentes
        if nlp_data and "responses" in state_def:
            intent = nlp_data.get("intent", "").lower()
            text = nlp_data.get("text", "").lower() if nlp_data else ""
            print(f"V√©rification des r√©ponses pour l'intention: {intent}")

            # V√©rifier les intentions oui/non
            if (
                intent in ["yes", "affirm", "agree"]
                or "oui" in text.lower()
                or "d'accord" in text.lower()
                or "ok" in text.lower()
            ):
                if "yes" in state_def["responses"]:
                    response = state_def["responses"]["yes"]
                    print(
                        f"R√©ponse 'oui' d√©tect√©e, transition vers: {response['next']}"
                    )
                    return {
                        "next_state": response["next"],
                        "message": response["message"],
                        "is_final": response.get("is_final", False),
                        "eligibility_result": response.get("eligibility_result"),
                    }
            elif (
                intent in ["no", "deny", "disagree"]
                or "non" in text.lower()
                or "pas" in text.lower()
            ):
                if "no" in state_def["responses"]:
                    response = state_def["responses"]["no"]
                    print(
                        f"R√©ponse 'non' d√©tect√©e, transition vers: {response['next']}"
                    )
                    return {
                        "next_state": response["next"],
                        "message": response["message"],
                        "is_final": response.get("is_final", False),
                        "eligibility_result": response.get("eligibility_result"),
                    }
            else:
                # Si nous sommes dans un √©tat qui attend une r√©ponse oui/non mais qu'on n'a pas pu l'interpr√©ter
                if "yes" in state_def["responses"] and "no" in state_def["responses"]:
                    return {
                        "next_state": current_state,  # Rester dans le m√™me √©tat
                        "message": "Je n'ai pas compris votre r√©ponse. Pourriez-vous r√©pondre simplement par oui ou par non ?",
                        "is_final": False,
                    }

        # Rechercher d'autres entit√©s dans les donn√©es
        if nlp_data and "entities" in nlp_data:
            entities = nlp_data["entities"]

            # Traitement sp√©cial pour l'√¢ge si nous sommes dans l'√©tat age_verification
            if current_state == "age_verification" and "age" in entities:
                age = entities["age"]
                print(f"√Çge d√©tect√©: {age}")

                # D√©terminer la prochaine √©tape en fonction de l'√¢ge
                if age < 16:
                    return {
                        "next_state": "not_eligible_age",
                        "message": "Je suis d√©sol√©, mais vous devez avoir au moins 16 ans pour √™tre √©ligible aux programmes.",
                        "is_final": True,
                        "eligibility_result": "Non √©ligible (√¢ge)",
                    }
                elif age <= 25.5:
                    return {
                        "next_state": "rsa_verification_young",
                        "message": "√ätes-vous b√©n√©ficiaire du RSA ?",
                        "is_final": False,
                    }
                elif age < 64:
                    return {
                        "next_state": "rsa_verification_adult",
                        "message": "√ätes-vous b√©n√©ficiaire du RSA ?",
                        "is_final": False,
                    }
                else:
                    return {
                        "next_state": "not_eligible_age",
                        "message": "Je suis d√©sol√©, mais vous devez avoir moins de 64 ans pour √™tre √©ligible aux programmes.",
                        "is_final": True,
                        "eligibility_result": "Non √©ligible (√¢ge)",
                    }
            # G√©rer le cas o√π on est dans un √©tat qui n√©cessite l'√¢ge mais qu'on ne l'a pas d√©tect√©
            elif current_state == "age_verification" and "age" not in entities:
                return {
                    "next_state": current_state,  # Rester dans le m√™me √©tat
                    "message": "Je n'ai pas compris votre √¢ge. Pourriez-vous me dire quel √¢ge vous avez en chiffres ?",
                    "is_final": False,
                }

            # V√©rification scolarisation dans les √©tats concern√©s
            if "schooling_verification" in current_state:
                schooling_detected = False
                text = nlp_data.get("text", "").lower() if nlp_data else ""
                intent = nlp_data.get("intent", "").lower() if nlp_data else ""

                if "schooling" in entities:
                    schooling_detected = True
                elif intent == "yes" or "oui" in text:
                    # Ajouter scolarisation aux donn√©es utilisateur si oui d√©tect√©
                    if conversation_id not in self.user_data:
                        self.user_data[conversation_id] = {}
                    self.user_data[conversation_id]["schooling"] = True
                    schooling_detected = True
                elif intent == "no" or "non" in text or "pas" in text:
                    # Ajouter scolarisation aux donn√©es utilisateur si non d√©tect√©
                    if conversation_id not in self.user_data:
                        self.user_data[conversation_id] = {}
                    self.user_data[conversation_id]["schooling"] = False
                    schooling_detected = True

                    # Traitement sp√©cial pour jeune sans RSA et non scolaris√©
                    if current_state == "schooling_verification_young_no_rsa":
                        print("*** D√©tect√©: jeune, sans RSA, non scolaris√© ***")
                        return {
                            "next_state": "city_verification_young_no_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                            "is_final": False,
                        }

                if not schooling_detected:
                    # Scolarisation non d√©tect√©e alors qu'on est dans un √©tat qui l'attend
                    return {
                        "next_state": current_state,  # Rester dans le m√™me √©tat
                        "message": "Je n'ai pas compris si vous √™tes actuellement scolaris√©. Pourriez-vous r√©pondre simplement par oui ou par non ?",
                        "is_final": False,
                    }

            # V√©rification ville dans les √©tats concern√©s
            if "city_verification" in current_state:
                # V√©rifier d'abord les codes postaux directement
                text = nlp_data.get("text", "").lower() if nlp_data else ""
                code_postal_pattern = r"93\s*[0-9]{3}"

                # Tenter de trouver un code postal dans le texte
                import re

                code_match = re.search(code_postal_pattern, text)
                if code_match:
                    code_postal = code_match.group().replace(" ", "")

                    # Mappage des codes postaux
                    code_postal_mapping = {
                        "93200": "saint-denis",
                        "93240": "stains",
                        "93380": "pierrefitte",
                        "93400": "saint-ouen",
                        "93800": "√©pinay-sur-seine",
                        "93430": "villetaneuse",
                        "93450": "√Æle-saint-denis",
                        "93300": "aubervilliers",
                        "93120": "la-courneuve",
                        "93370": "montfermeil",
                    }

                    if code_postal in code_postal_mapping:
                        # Ajouter la ville aux donn√©es utilisateur
                        if conversation_id not in self.user_data:
                            self.user_data[conversation_id] = {}
                        self.user_data[conversation_id]["city"] = code_postal_mapping[
                            code_postal
                        ]

                        # Traitement sp√©cifique pour jeune non RSA non scolaris√©
                        if current_state == "city_verification_young_no_rsa":
                            city = code_postal_mapping[code_postal]
                            ml_cities = [
                                "saint-denis",
                                "pierrefitte",
                                "saint-ouen",
                                "√©pinay-sur-seine",
                                "villetaneuse",
                                "√Æle-saint-denis",
                            ]

                            if city in ml_cities:
                                print(
                                    f"*** Ville ML d√©tect√©e via code postal: {city} ***"
                                )
                                return {
                                    "next_state": "eligible_ml",
                                    "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par la mission locale de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. Cliquer ici pour prendre un rendez vous avec un conseiller",
                                    "is_final": True,
                                    "eligibility_result": "ML",
                                }
                # Si aucun code postal n'a √©t√© d√©tect√©, v√©rifier si la ville est manquante
                elif "city" not in entities:
                    # Ville non d√©tect√©e alors qu'on est dans un √©tat qui l'attend
                    city_keywords = [
                        "saint-denis",
                        "st-denis",
                        "saint denis",
                        "stains",
                        "pierrefitte",
                        "pierrefitte-sur-seine",
                        "saint-ouen",
                        "st-ouen",
                        "saint ouen",
                        "√©pinay",
                        "epinay",
                        "√©pinay-sur-seine",
                        "villetaneuse",
                        "√Æle-saint-denis",
                        "ile-saint-denis",
                        "√Æle saint denis",
                        "aubervilliers",
                        "la courneuve",
                        "la-courneuve",
                        "montfermeil",
                    ]

                    # V√©rifier si un mot-cl√© de ville est dans le texte
                    city_found = False
                    for city in city_keywords:
                        if city in text:
                            city_found = True
                            # Ajouter la ville normalis√©e aux donn√©es utilisateur
                            city_mapping = {
                                "saint denis": "saint-denis",
                                "st-denis": "saint-denis",
                                "st denis": "saint-denis",
                                "pierrefitte-sur-seine": "pierrefitte",
                                "pierfitte": "pierrefitte",
                                "pierrefite": "pierrefitte",
                                "saint ouen": "saint-ouen",
                                "st-ouen": "saint-ouen",
                                "st ouen": "saint-ouen",
                                "epinay": "√©pinay-sur-seine",
                                "√©pinay": "√©pinay-sur-seine",
                                "epinay-sur-seine": "√©pinay-sur-seine",
                                "ile-saint-denis": "√Æle-saint-denis",
                                "ile saint denis": "√Æle-saint-denis",
                                "√Æle saint denis": "√Æle-saint-denis",
                                "la courneuve": "la-courneuve",
                            }
                            normalized_city = city_mapping.get(city, city)
                            if conversation_id not in self.user_data:
                                self.user_data[conversation_id] = {}
                            self.user_data[conversation_id]["city"] = normalized_city

                            # Traitement sp√©cifique pour jeune non RSA non scolaris√©
                            if current_state == "city_verification_young_no_rsa":
                                ml_cities = [
                                    "saint-denis",
                                    "pierrefitte",
                                    "saint-ouen",
                                    "√©pinay-sur-seine",
                                    "villetaneuse",
                                    "√Æle-saint-denis",
                                ]

                                if normalized_city in ml_cities:
                                    print(
                                        f"*** Ville ML d√©tect√©e par mot-cl√©: {normalized_city} ***"
                                    )
                                    return {
                                        "next_state": "eligible_ml",
                                        "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par la mission locale de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. Cliquer ici pour prendre un rendez vous avec un conseiller",
                                        "is_final": True,
                                        "eligibility_result": "ML",
                                    }
                            break

                    if not city_found:
                        return {
                            "next_state": current_state,  # Rester dans le m√™me √©tat
                            "message": "Je n'ai pas reconnu cette ville. Pourriez-vous pr√©ciser dans quelle ville vous habitez parmi : Saint-Denis (93200), Stains (93240), Pierrefitte (93380), Saint-Ouen (93400), √âpinay-sur-Seine (93800), Villetaneuse (93430), √éle-Saint-Denis (93450), Aubervilliers (93300), La Courneuve (93120) ?",
                            "is_final": False,
                        }

        # V√©rifier si toutes les conditions sont remplies pour ML et appliquer un override
        if conversation_id in self.user_data:
            user_data = self.user_data[conversation_id]

            # Cas sp√©cifique: jeune (16-25.5) sans RSA, non scolaris√©, habitant dans une ville ML
            if (
                user_data.get("age", 0) >= 16
                and user_data.get("age", 0) <= 25.5
                and user_data.get("rsa") is False
                and user_data.get("schooling") is False
                and "city" in user_data
                and user_data["city"].lower()
                in [
                    "saint-denis",
                    "pierrefitte",
                    "saint-ouen",
                    "√©pinay-sur-seine",
                    "villetaneuse",
                    "√Æle-saint-denis",
                ]
            ):

                print("*** CONDITIONS ML D√âTECT√âES - OVERRIDE APPLIQU√â ***")
                return {
                    "next_state": "eligible_ml",
                    "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par la mission locale de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. Cliquer ici pour prendre un rendez vous avec un conseiller",
                    "is_final": True,
                    "eligibility_result": "ML",
                }

        # √âtat suivant par d√©faut - si on arrive ici, c'est qu'on n'a pas pu interpr√©ter la r√©ponse
        # Redemander en fonction de l'√©tat actuel
        if "age_verification" in current_state:
            return {
                "next_state": current_state,
                "message": "Je n'ai pas compris votre √¢ge. Pourriez-vous me donner votre √¢ge en chiffres, par exemple 25 ?",
                "is_final": False,
            }
        elif "rsa_verification" in current_state:
            return {
                "next_state": current_state,
                "message": "Je n'ai pas compris si vous √™tes b√©n√©ficiaire du RSA. Pouvez-vous r√©pondre simplement par oui ou par non ?",
                "is_final": False,
            }
        elif "schooling_verification" in current_state:
            return {
                "next_state": current_state,
                "message": "Je n'ai pas compris si vous √™tes actuellement scolaris√©. Pouvez-vous r√©pondre simplement par oui ou par non ?",
                "is_final": False,
            }
        elif "city_verification" in current_state:
            return {
                "next_state": current_state,
                "message": "Je n'ai pas reconnu cette ville. Pourriez-vous pr√©ciser dans quelle ville vous habitez ? Par exemple : Saint-Denis, Stains, Pierrefitte, etc.",
                "is_final": False,
            }
        else:
            # Transition par d√©faut g√©n√©rique
            print(f"Transition par d√©faut vers: {state_def.get('next', current_state)}")
            return {
                "next_state": state_def.get("next", current_state),
                "message": state_def.get("message", "Comment puis-je vous aider ?"),
                "is_final": state_def.get("is_final", False),
                "eligibility_result": state_def.get("eligibility_result"),
            }

    def get_rules(self):
        """Retourner les r√®gles actuelles"""
        return self.rules

    def _process_special_logic(self, process_type, nlp_data, existing_data=None):
        """Traiter la logique sp√©ciale bas√©e sur le type de processus"""
        result = {}
        if existing_data:
            result.update(existing_data)

        if process_type == "extract_age":
            # D'abord v√©rifier si l'√¢ge est d√©j√† dans les donn√©es existantes
            if existing_data and "age" in existing_data:
                print(f"√Çge d√©j√† pr√©sent dans les donn√©es: {existing_data['age']}")
                result["age"] = existing_data["age"]
                return result

            # Extraire la ville des donn√©es NLP
            text = nlp_data.get("text", "").lower()

            # V√©rifier d'abord si un code postal 93XXX est mentionn√© et si nous sommes dans un contexte de ville
            if (
                "ville" in text
                or "habite" in text
                or "code" in text
                or "postal" in text
            ):
                postcode_pattern = r"93\s*[0-9]{3}"
                postcode_match = re.search(postcode_pattern, text)
                if postcode_match:
                    # Ne pas interpr√©ter code postal comme √¢ge dans un contexte de ville
                    print(
                        f"Code postal trouv√© dans un contexte de ville: {postcode_match.group()}"
                    )
                    return result

            # Sinon, extraire l'√¢ge des donn√©es NLP ou du message utilisateur
            entities = nlp_data.get("entities", {})

            if "age" in entities:
                age = entities["age"]
                result["age"] = age
                print(f"√Çge extrait des entit√©s NLP: {age}")
            else:
                # Essayer d'extraire du texte brut
                print(f"Tentative d'extraction d'√¢ge du texte: '{text}'")

                try:
                    # Trouver le premier nombre dans le texte
                    age_match = re.search(r"\d+", text)
                    if age_match:
                        age = int(age_match.group())
                        result["age"] = age
                        print(f"√Çge extrait du texte (chiffres): {age}")
                    else:
                        # Liste √©tendue de nombres √©crits en toutes lettres
                        number_words = {
                            # Nombres de 16 √† 19
                            "seize": 16,
                            "16 ans": 16,
                            "dix-sept": 17,
                            "dix sept": 17,
                            "dixsept": 17,
                            "17 ans": 17,
                            "dix-huit": 18,
                            "dix huit": 18,
                            "dixhuit": 18,
                            "18 ans": 18,
                            "dix-neuf": 19,
                            "dix neuf": 19,
                            "dixneuf": 19,
                            "19 ans": 19,
                            # Nombres de 20 √† 29
                            "vingt": 20,
                            "20 ans": 20,
                            "vingt et un": 21,
                            "vingt-et-un": 21,
                            "21 ans": 21,
                            "vingt-deux": 22,
                            "vingt deux": 22,
                            "22 ans": 22,
                            "vingt-trois": 23,
                            "vingt trois": 23,
                            "23 ans": 23,
                            "vingt-quatre": 24,
                            "vingt quatre": 24,
                            "24 ans": 24,
                            "vingt-cinq": 25,
                            "vingt cinq": 25,
                            "25 ans": 25,
                            "vingt-six": 26,
                            "vingt six": 26,
                            "26 ans": 26,
                            "vingt-sept": 27,
                            "vingt sept": 27,
                            "27 ans": 27,
                            "vingt-huit": 28,
                            "vingt huit": 28,
                            "28 ans": 28,
                            "vingt-neuf": 29,
                            "vingt neuf": 29,
                            "29 ans": 29,
                            # Nombres de 30 √† 39
                            "trente": 30,
                            "30 ans": 30,
                            "trente et un": 31,
                            "trente-et-un": 31,
                            "31 ans": 31,
                            "trente-deux": 32,
                            "trente deux": 32,
                            "32 ans": 32,
                            "trente-trois": 33,
                            "trente trois": 33,
                            "33 ans": 33,
                            "trente-quatre": 34,
                            "trente quatre": 34,
                            "34 ans": 34,
                            "trente-cinq": 35,
                            "trente cinq": 35,
                            "35 ans": 35,
                            "trente-six": 36,
                            "trente six": 36,
                            "36 ans": 36,
                            "trente-sept": 37,
                            "trente sept": 37,
                            "37 ans": 37,
                            "trente-huit": 38,
                            "trente huit": 38,
                            "38 ans": 38,
                            "trente-neuf": 39,
                            "trente neuf": 39,
                            "39 ans": 39,
                            # Nombres de 40 √† 49
                            "quarante": 40,
                            "40 ans": 40,
                            "quarante et un": 41,
                            "quarante-et-un": 41,
                            "41 ans": 41,
                            "quarante-deux": 42,
                            "quarante deux": 42,
                            "42 ans": 42,
                            "quarante-trois": 43,
                            "quarante trois": 43,
                            "43 ans": 43,
                            "quarante-quatre": 44,
                            "quarante quatre": 44,
                            "44 ans": 44,
                            "quarante-cinq": 45,
                            "quarante cinq": 45,
                            "45 ans": 45,
                            "quarante-six": 46,
                            "quarante six": 46,
                            "46 ans": 46,
                            "quarante-sept": 47,
                            "quarante sept": 47,
                            "47 ans": 47,
                            "quarante-huit": 48,
                            "quarante huit": 48,
                            "48 ans": 48,
                            "quarante-neuf": 49,
                            "quarante neuf": 49,
                            "49 ans": 49,
                            # Nombres de 50 √† 61
                            "cinquante": 50,
                            "50 ans": 50,
                            "cinquante et un": 51,
                            "cinquante-et-un": 51,
                            "51 ans": 51,
                            "cinquante-deux": 52,
                            "cinquante deux": 52,
                            "52 ans": 52,
                            "cinquante-trois": 53,
                            "cinquante trois": 53,
                            "53 ans": 53,
                            "cinquante-quatre": 54,
                            "cinquante quatre": 54,
                            "54 ans": 54,
                            "cinquante-cinq": 55,
                            "cinquante cinq": 55,
                            "55 ans": 55,
                            "cinquante-six": 56,
                            "cinquante six": 56,
                            "56 ans": 56,
                            "cinquante-sept": 57,
                            "cinquante sept": 57,
                            "57 ans": 57,
                            "cinquante-huit": 58,
                            "cinquante huit": 58,
                            "58 ans": 58,
                            "cinquante-neuf": 59,
                            "cinquante neuf": 59,
                            "59 ans": 59,
                            "soixante": 60,
                            "60 ans": 60,
                            "soixante et un": 61,
                            "soixante-et-un": 61,
                            "61 ans": 61,
                        }

                        for word, value in number_words.items():
                            if word in text:
                                result["age"] = value
                                print(f"√Çge extrait du texte (mots): {value}")
                                break
                        else:
                            print(f"Aucun √¢ge trouv√© dans le texte")
                except Exception as e:
                    print(f"Erreur lors de l'extraction d'√¢ge: {str(e)}")

        elif process_type == "extract_city":
            # D'abord v√©rifier si la ville est d√©j√† dans les donn√©es existantes
            if existing_data and "city" in existing_data:
                print(f"Ville d√©j√† pr√©sente dans les donn√©es: {existing_data['city']}")
                result["city"] = existing_data["city"].lower()
                return result

            # Extraire la ville des donn√©es NLP
            entities = nlp_data.get("entities", {})
            text = nlp_data.get("text", "").lower()

            # V√©rifier d'abord si un code postal de Seine-Saint-Denis est pr√©sent
            postcode_pattern = r"93\s*[0-9]{3}"
            postcode_match = re.search(postcode_pattern, text)
            if postcode_match:
                postcode = (
                    postcode_match.group()
                    .replace(" ", "")
                    .replace(".", "")
                    .replace(",", "")
                )

                # Mappage des codes postaux
                code_postal_mapping = {
                    "93200": "saint-denis",
                    "93240": "stains",
                    "93380": "pierrefitte",
                    "93400": "saint-ouen",
                    "93800": "√©pinay-sur-seine",
                    "93430": "villetaneuse",
                    "93450": "√Æle-saint-denis",
                    "93300": "aubervilliers",
                    "93120": "la-courneuve",
                    "93370": "montfermeil",
                }

                if postcode in code_postal_mapping:
                    result["city"] = code_postal_mapping[postcode]
                    print(
                        f"Ville extraite via code postal: {postcode} => {result['city']}"
                    )
                    return result

            # Si pas de code postal trouv√©, continuer avec la logique existante
            if "city" in entities:
                city = entities["city"]
                result["city"] = city.lower()
                print(f"Ville extraite des entit√©s NLP: {city}")
            else:
                # Essayer d'extraire du texte brut
                print(f"Tentative d'extraction de ville du texte: '{text}'")

                cities = [
                    # Saint-Denis
                    "saint-denis",
                    "saint denis",
                    "st-denis",
                    "st denis",
                    "93200",
                    "93 200",
                    "93.200",
                    "932 00",
                    "93-200",
                    "quatre-vingt-treize deux cents",
                    "quatre vingt treize deux cents",
                    # Pierrefitte-sur-Seine
                    "pierrefitte",
                    "pierrefitte-sur-seine",
                    "pierfitte",
                    "pierrefite",
                    "93380",
                    "93 380",
                    "93.380",
                    "933 80",
                    "93-380",
                    "quatre-vingt-treize trois cent quatre-vingts",
                    "quatre vingt treize trois cent quatre vingts",
                    # Saint-Ouen-sur-Seine
                    "saint-ouen",
                    "saint ouen",
                    "st-ouen",
                    "st ouen",
                    "saint-ouen-sur-seine",
                    "93400",
                    "93 400",
                    "93.400",
                    "934 00",
                    "93-400",
                    "quatre-vingt-treize quatre cents",
                    "quatre vingt treize quatre cents",
                    # √âpinay-sur-Seine
                    "epinay",
                    "√©pinay",
                    "epinay-sur-seine",
                    "√©pinay-sur-seine",
                    "93800",
                    "93 800",
                    "93.800",
                    "938 00",
                    "93-800",
                    "quatre-vingt-treize huit cents",
                    "quatre vingt treize huit cents",
                    # Villetaneuse
                    "villetaneuse",
                    "93430",
                    "93 430",
                    "93.430",
                    "934 30",
                    "93-430",
                    "quatre-vingt-treize quatre cent trente",
                    "quatre vingt treize quatre cent trente",
                    # √éle-Saint-Denis
                    "ile-saint-denis",
                    "√Æle-saint-denis",
                    "ile saint denis",
                    "√Æle saint denis",
                    "93450",
                    "93 450",
                    "93.450",
                    "934 50",
                    "93-450",
                    "quatre-vingt-treize quatre cent cinquante",
                    "quatre vingt treize quatre cent cinquante",
                    # Aubervilliers
                    "aubervilliers",
                    "93300",
                    "93 300",
                    "93.300",
                    "933 00",
                    "93-300",
                    "quatre-vingt-treize trois cents",
                    "quatre vingt treize trois cents",
                    # La Courneuve
                    "la courneuve",
                    "la-courneuve",
                    "93120",
                    "93 120",
                    "93.120",
                    "931 20",
                    "93-120",
                    "quatre-vingt-treize cent vingt",
                    "quatre vingt treize cent vingt",
                    # Stains
                    "stains",
                    "93240",
                    "93 240",
                    "93.240",
                    "932 40",
                    "93-240",
                    "quatre-vingt-treize deux cent quarante",
                    "quatre vingt treize deux cent quarante",
                    # Montfermeil
                    "montfermeil",
                    "93370",
                    "93 370",
                    "93.370",
                    "933 70",
                    "93-370",
                    "quatre-vingt-treize trois cent soixante-dix",
                    "quatre vingt treize trois cent soixante dix",
                ]

                # Normalisation des variantes de noms de villes vers leur forme standard
                city_mapping = {
                    # Saint-Denis
                    "saint denis": "saint-denis",
                    "st-denis": "saint-denis",
                    "st denis": "saint-denis",
                    "93200": "saint-denis",
                    "93 200": "saint-denis",
                    "93.200": "saint-denis",
                    "932 00": "saint-denis",
                    "93-200": "saint-denis",
                    "quatre-vingt-treize deux cents": "saint-denis",
                    "quatre vingt treize deux cents": "saint-denis",
                    # Stains
                    "93240": "stains",
                    "93 240": "stains",
                    "93.240": "stains",
                    "932 40": "stains",
                    "93-240": "stains",
                    "quatre-vingt-treize deux cent quarante": "stains",
                    "quatre vingt treize deux cent quarante": "stains",
                    # Pierrefitte
                    "pierrefitte-sur-seine": "pierrefitte",
                    "pierfitte": "pierrefitte",
                    "pierrefite": "pierrefitte",
                    "93380": "pierrefitte",
                    "93 380": "pierrefitte",
                    "93.380": "pierrefitte",
                    "933 80": "pierrefitte",
                    "93-380": "pierrefitte",
                    "quatre-vingt-treize trois cent quatre-vingts": "pierrefitte",
                    "quatre vingt treize trois cent quatre vingts": "pierrefitte",
                    # Saint-Ouen
                    "saint ouen": "saint-ouen",
                    "st-ouen": "saint-ouen",
                    "st ouen": "saint-ouen",
                    "saint-ouen-sur-seine": "saint-ouen",
                    "93400": "saint-ouen",
                    "93 400": "saint-ouen",
                    "93.400": "saint-ouen",
                    "934 00": "saint-ouen",
                    "93-400": "saint-ouen",
                    "quatre-vingt-treize quatre cents": "saint-ouen",
                    "quatre vingt treize quatre cents": "saint-ouen",
                    # √âpinay-sur-Seine
                    "epinay": "√©pinay-sur-seine",
                    "√©pinay": "√©pinay-sur-seine",
                    "epinay-sur-seine": "√©pinay-sur-seine",
                    "93800": "√©pinay-sur-seine",
                    "93 800": "√©pinay-sur-seine",
                    "93.800": "√©pinay-sur-seine",
                    "938 00": "√©pinay-sur-seine",
                    "93-800": "√©pinay-sur-seine",
                    "quatre-vingt-treize huit cents": "√©pinay-sur-seine",
                    "quatre vingt treize huit cents": "√©pinay-sur-seine",
                    # Villetaneuse
                    "93430": "villetaneuse",
                    "93 430": "villetaneuse",
                    "93.430": "villetaneuse",
                    "934 30": "villetaneuse",
                    "93-430": "villetaneuse",
                    "quatre-vingt-treize quatre cent trente": "villetaneuse",
                    "quatre vingt treize quatre cent trente": "villetaneuse",
                    # √éle-Saint-Denis
                    "ile-saint-denis": "√Æle-saint-denis",
                    "ile saint denis": "√Æle-saint-denis",
                    "√Æle saint denis": "√Æle-saint-denis",
                    "93450": "√Æle-saint-denis",
                    "93 450": "√Æle-saint-denis",
                    "93.450": "√Æle-saint-denis",
                    "934 50": "√Æle-saint-denis",
                    "93-450": "√Æle-saint-denis",
                    "quatre-vingt-treize quatre cent cinquante": "√Æle-saint-denis",
                    "quatre vingt treize quatre cent cinquante": "√Æle-saint-denis",
                    # Aubervilliers
                    "93300": "aubervilliers",
                    "93 300": "aubervilliers",
                    "93.300": "aubervilliers",
                    "933 00": "aubervilliers",
                    "93-300": "aubervilliers",
                    "quatre-vingt-treize trois cents": "aubervilliers",
                    "quatre vingt treize trois cents": "aubervilliers",
                    # La Courneuve
                    "la courneuve": "la-courneuve",
                    "93120": "la-courneuve",
                    "93 120": "la-courneuve",
                    "93.120": "la-courneuve",
                    "931 20": "la-courneuve",
                    "93-120": "la-courneuve",
                    "quatre-vingt-treize cent vingt": "la-courneuve",
                    "quatre vingt treize cent vingt": "la-courneuve",
                    # Montfermeil
                    "93370": "montfermeil",
                    "93 370": "montfermeil",
                    "93.370": "montfermeil",
                    "933 70": "montfermeil",
                    "93-370": "montfermeil",
                    "quatre-vingt-treize trois cent soixante-dix": "montfermeil",
                    "quatre vingt treize trois cent soixante dix": "montfermeil",
                }

                for city in cities:
                    if city in text or city.replace("-", " ") in text:
                        # Normaliser le nom de la ville si n√©cessaire
                        normalized_city = city_mapping.get(city, city)
                        result["city"] = normalized_city
                        print(
                            f"Ville extraite du texte: {city} (normalis√©e en: {normalized_city})"
                        )
                        break
                else:
                    print(f"Aucune ville reconnue dans le texte")

        return result

    def _evaluate_condition(self, condition, data):
        """√âvaluer une condition par rapport aux donn√©es"""
        print(
            f"√âvaluation de la condition: '{condition}' avec les donn√©es: {json.dumps(data)}"
        )

        try:
            # Cas sp√©cial pour la condition "True"
            if condition == "True":
                return True

            # Cas sp√©cial pour v√©rifier si une valeur est dans une liste
            if " in [" in condition and "]" in condition:
                # Extraire la variable et la liste
                var_name, list_str = condition.split(" in ", 1)
                var_name = var_name.strip()

                if var_name in data:
                    # Normaliser la valeur entr√©e
                    city_value = (
                        data[var_name].lower() if var_name == "city" else data[var_name]
                    )

                    # √âvaluer la liste (en supposant qu'elle est correctement format√©e)
                    list_value = eval(list_str, {"__builtins__": {}})

                    # Pour les villes, v√©rifier avec plus de flexibilit√©
                    if var_name == "city":
                        # D√©finir des mappings pour normaliser les noms de villes
                        city_normalization = {
                            "saint-denis": [
                                "saint-denis",
                                "saint denis",
                                "st-denis",
                                "st denis",
                                "93200",
                                "93 200",
                                "93.200",
                                "932 00",
                                "93-200",
                                "quatre-vingt-treize deux cents",
                                "quatre vingt treize deux cents",
                            ],
                            "stains": [
                                "stains",
                                "93240",
                                "93 240",
                                "93.240",
                                "932 40",
                                "93-240",
                                "quatre-vingt-treize deux cent quarante",
                                "quatre vingt treize deux cent quarante",
                            ],
                            "pierrefitte": [
                                "pierrefitte",
                                "pierrefitte-sur-seine",
                                "pierfitte",
                                "pierrefite",
                                "93380",
                                "93 380",
                                "93.380",
                                "933 80",
                                "93-380",
                                "quatre-vingt-treize trois cent quatre-vingts",
                                "quatre vingt treize trois cent quatre vingts",
                            ],
                            "saint-ouen": [
                                "saint-ouen",
                                "saint ouen",
                                "st-ouen",
                                "st ouen",
                                "saint-ouen-sur-seine",
                                "93400",
                                "93 400",
                                "93.400",
                                "934 00",
                                "93-400",
                                "quatre-vingt-treize quatre cents",
                                "quatre vingt treize quatre cents",
                            ],
                            "√©pinay-sur-seine": [
                                "epinay",
                                "√©pinay",
                                "epinay-sur-seine",
                                "√©pinay-sur-seine",
                                "93800",
                                "93 800",
                                "93.800",
                                "938 00",
                                "93-800",
                                "quatre-vingt-treize huit cents",
                                "quatre vingt treize huit cents",
                            ],
                            "villetaneuse": [
                                "villetaneuse",
                                "93430",
                                "93 430",
                                "93.430",
                                "934 30",
                                "93-430",
                                "quatre-vingt-treize quatre cent trente",
                                "quatre vingt treize quatre cent trente",
                            ],
                            "√Æle-saint-denis": [
                                "ile-saint-denis",
                                "√Æle-saint-denis",
                                "ile saint denis",
                                "√Æle saint denis",
                                "93450",
                                "93 450",
                                "93.450",
                                "934 50",
                                "93-450",
                                "quatre-vingt-treize quatre cent cinquante",
                                "quatre vingt treize quatre cent cinquante",
                            ],
                            "aubervilliers": [
                                "aubervilliers",
                                "93300",
                                "93 300",
                                "93.300",
                                "933 00",
                                "93-300",
                                "quatre-vingt-treize trois cents",
                                "quatre vingt treize trois cents",
                            ],
                            "la-courneuve": [
                                "la courneuve",
                                "la-courneuve",
                                "93120",
                                "93 120",
                                "93.120",
                                "931 20",
                                "93-120",
                                "quatre-vingt-treize cent vingt",
                                "quatre vingt treize cent vingt",
                            ],
                            "montfermeil": [
                                "montfermeil",
                                "93370",
                                "93 370",
                                "93.370",
                                "933 70",
                                "93-370",
                                "quatre-vingt-treize trois cent soixante-dix",
                                "quatre vingt treize trois cent soixante dix",
                            ],
                        }

                        # V√©rifier si la ville entr√©e correspond √† l'une des villes normalis√©es dans la liste
                        for listed_city in list_value:
                            listed_city_lower = listed_city.lower()
                            # V√©rification directe
                            if city_value == listed_city_lower:
                                return True

                            # V√©rifier les variantes connues
                            for standard_city, variants in city_normalization.items():
                                if (
                                    listed_city_lower in variants
                                    and city_value in variants
                                ):
                                    print(
                                        f"Ville '{city_value}' reconnue comme variante de '{standard_city}' qui est dans la liste"
                                    )
                                    return True

                        print(
                            f"Ville '{city_value}' non trouv√©e dans les variantes reconnues"
                        )
                        return False
                    else:
                        # Pour les autres variables, v√©rification standard
                        result = data[var_name] in list_value
                        print(
                            f"√âvaluation standard 'in': {data[var_name]} in {list_value} => {result}"
                        )
                        return result
                else:
                    print(
                        f"Variable '{var_name}' requise pour 'in' mais absente des donn√©es!"
                    )
                    return False

            # Cr√©er un contexte d'√©valuation s√©curis√© pour les autres conditions
            eval_context = {}

            # Ajouter les donn√©es au contexte
            for key, value in data.items():
                eval_context[key] = value
                print(f"Variable ajout√©e au contexte: {key} = {value}")

            # V√©rifier si toutes les variables requises sont pr√©sentes
            for var_name in re.findall(r"\b([a-zA-Z_][a-zA-Z0-9_]*)\b", condition):
                if (
                    var_name not in eval_context
                    and var_name != "True"
                    and var_name != "False"
                    and var_name != "and"
                    and var_name != "or"
                    and var_name != "in"
                    and var_name != "not"
                ):
                    print(
                        f"ATTENTION: Variable '{var_name}' requise dans la condition mais absente des donn√©es!"
                    )
                    return False

            # √âvaluer la condition dans un environnement s√©curis√©
            result = eval(condition, {"__builtins__": {}}, eval_context)
            print(f"R√©sultat de l'√©valuation: {result}")
            return result
        except Exception as e:
            print(f"Erreur lors de l'√©valuation de la condition: {str(e)}")
            if condition == "True":  # Fallback pour la condition "True"
                print(f"Condition 'True' √©valu√©e par d√©faut √† True")
                return True
            return False
