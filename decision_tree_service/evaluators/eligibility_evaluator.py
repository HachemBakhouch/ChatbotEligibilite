import json
import os
import re
from datetime import datetime

# Importer le module city_variants
try:
    from data.city_variants import (
        CITY_VARIANTS,
        find_city_from_text,
        normalize_city_name,
    )
except ImportError:
    # Fallback si le chemin d'import direct ne fonctionne pas
    import sys
    import os.path

    sys.path.append(os.path.dirname(os.path.dirname(__file__)))
    from data.city_variants import (
        CITY_VARIANTS,
        find_city_from_text,
        normalize_city_name,
    )


class EligibilityEvaluator:
    """√âvalue l'√©ligibilit√© des utilisateurs bas√©e sur les r√®gles de l'arbre d√©cisionnel"""

    def __init__(self, rules_file=None):
        """Initialiser avec un fichier de r√®gles optionnel"""
        # Cr√©er le r√©pertoire rules s'il n'existe pas
        if not os.path.exists("../rules"):
            os.makedirs("../rules")

        self.rules_file = rules_file or os.path.join(
            os.path.dirname(os.path.dirname(__file__)),
            "rules",
            "eligibility_rules.json",
        )
        self.rules = self._load_rules()
        self.user_data = {}  # Stocker temporairement les donn√©es utilisateur

    def _load_rules(self):
        """Charger les r√®gles depuis le fichier JSON"""
        try:
            # V√©rifier si le fichier existe
            if not os.path.exists(self.rules_file):
                # Cr√©er le fichier avec les r√®gles par d√©faut
                os.makedirs(os.path.dirname(self.rules_file), exist_ok=True)
                with open(self.rules_file, "w", encoding="utf-8") as f:
                    json.dump(
                        self._get_default_rules(), f, ensure_ascii=False, indent=2
                    )

            with open(
                self.rules_file, "r", encoding="utf-8-sig"
            ) as f:  # Utiliser utf-8-sig pour g√©rer le BOM
                return json.load(f)
        except Exception as e:
            print(f"Erreur lors du chargement des r√®gles: {str(e)}")
            # Revenir aux r√®gles par d√©faut
            return self._get_default_rules()

    def _get_default_rules(self):
        """Retourner les r√®gles par d√©faut si le fichier ne peut pas √™tre charg√©"""
        return {
            "states": {
                "initial": {
                    "next": "consent",
                    "message": "Bonjour et ravi de te voir ici ! Je suis CODEE, ton assistant intelligent pr√™t √† t'aider. üöÄ Je suis l√† pour toi !",
                },
                "pre_consent": {
                    "next": "consent",
                    "message": "Bien s√ªr, je suis l√† pour t'aider ! üòä\nDonne moi plus de d√©tails sur ton besoin?",
                },
                "consent": {
                    "next": "age_verification",
                    "message": "Avant de commencer, je dois recueillir quelques informations personnelles pour d√©terminer votre √©ligibilit√©. Acceptez-vous que vos donn√©es soient trait√©es dans le cadre de cette √©valuation ?",
                    "responses": {
                        "yes": {
                            "next": "age_verification",
                            "message": "Pour mieux t'orienter, peux tu me communiquer ton √¢ge ? Cela m'aidera √† te fournir des informations adapt√©es √† ton profil. üòä",
                        },
                        "no": {
                            "next": "end",
                            "message": "Je comprends. Sans ces informations, je ne peux pas d√©terminer votre √©ligibilit√©. N'h√©sitez pas √† revenir si vous changez d'avis.",
                            "is_final": True,
                        },
                    },
                },
                "age_verification": {
                    "next": "rsa_verification",
                    "message": "Quel √¢ge avez-vous ?",
                    "process": "extract_age",
                    "transitions": [
                        {
                            "condition": "age < 16",
                            "next": "not_eligible_age",
                            "message": "Je suis d√©sol√©, mais vous devez avoir au moins 16 ans pour √™tre √©ligible aux programmes.",
                            "is_final": True,
                            "eligibility_result": "Non √©ligible (√¢ge)",
                        },
                        {
                            "condition": "age >= 16 and age <= 25.5",
                            "next": "rsa_verification_young",
                            "message": "√ätes-vous b√©n√©ficiaire du <b>RSA</b> (Revenu de Solidarit√© Active) ? C'est une aide sociale qui garantit un revenu minimum aux personnes sans ressources ou √† faibles revenus, vers√©e par la CAF ou la MSA.",
                        },
                        {
                            "condition": "age > 25.5 and age < 62",
                            "next": "rsa_verification_adult",
                            "message": "√ätes-vous b√©n√©ficiaire du <b>RSA</b> (Revenu de Solidarit√© Active) ? C'est une aide sociale qui garantit un revenu minimum aux personnes sans ressources ou √† faibles revenus, vers√©e par la CAF ou la MSA.",
                        },
                        {
                            "condition": "age >= 62",
                            "next": "not_eligible_age",
                            "message": "Je suis d√©sol√©, mais vous devez avoir moins de 62 ans pour √™tre √©ligible aux programmes.",
                            "is_final": True,
                            "eligibility_result": "Non √©ligible (√¢ge)",
                        },
                    ],
                },
                "rsa_verification": {
                    "next": "schooling_verification",
                    "message": "√ätes-vous b√©n√©ficiaire du <b>RSA</b> (Revenu de Solidarit√© Active) ? C'est une aide sociale qui garantit un revenu minimum aux personnes sans ressources ou √† faibles revenus, vers√©e par la CAF ou la MSA.",
                    "responses": {
                        "yes": {
                            "next": "schooling_verification_young_rsa",
                            "message": "D'accord, tu es scolaris√©?",
                        },
                        "no": {
                            "next": "schooling_verification_young_no_rsa",
                            "message": "D'accord, tu es scolaris√©?",
                        },
                    },
                },
                "rsa_verification_young": {
                    "next": "schooling_verification_young",
                    "message": "√ätes-vous b√©n√©ficiaire du <b>RSA</b> (Revenu de Solidarit√© Active) ? C'est une aide sociale qui garantit un revenu minimum aux personnes sans ressources ou √† faibles revenus, vers√©e par la CAF ou la MSA.",
                    "responses": {
                        "yes": {
                            "next": "schooling_verification_young_rsa",
                            "message": "D'accord, tu es scolaris√©?",
                        },
                        "no": {
                            "next": "schooling_verification_young_no_rsa",
                            "message": "D'accord, tu es scolaris√©?",
                        },
                    },
                },
                "schooling_verification_young_rsa": {
                    "next": "city_verification_young_rsa",
                    "message": "D'accord, tu es scolaris√©?",
                    "responses": {
                        "yes": {
                            "next": "city_verification_young_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                        },
                        "no": {
                            "next": "city_verification_young_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                        },
                    },
                },
                "city_verification_young_rsa": {
                    "next": "result",
                    "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                    "process": "extract_city",
                    "transitions": [
                        {
                            "condition": "city in ['saint-denis', 'stains', 'pierrefitte']",
                            "next": "eligible_ali",
                            "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par l'agence locale d'insertion de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. <a href='https://code93.fr/rendezvous/formulaire_ali.php' target='_blank'>Cliquez ici </a> pour prendre un rendez-vous avec un conseiller",
                            "is_final": True,
                            "eligibility_result": "ALI",
                        },
                        {
                            "condition": "True",
                            "next": "not_eligible_city",
                            "message": "Pour ton cas, je te recommande de contacter les services sociaux de ta ville ou de ton d√©partement pour explorer les dispositifs d'accompagnement disponibles localement.",
                            "is_final": True,
                            "eligibility_result": "Non √©ligible (ville)",
                        },
                    ],
                },
                "schooling_verification_young_no_rsa": {
                    "next": "city_verification_young_no_rsa",
                    "message": "D'accord, tu es scolaris√©?",
                    "responses": {
                        "yes": {
                            "next": "not_eligible_schooling",
                            "message": "Malheureusement, tu n'es pas √©ligible √† un accompagnement pour le moment, tant que tu es encore scolaris√©. üéì Cependant, d√®s que tu auras termin√© tes √©tudes, tu pourras b√©n√©ficier de nos services d'accompagnement pour t'aider dans ta recherche d'emploi et ton insertion professionnelle. En attendant, si tu as des questions ou besoin de conseils, tu peux appeler CODEE au  0148131320. A bient√¥t",
                            "is_final": True,
                            "eligibility_result": "Non √©ligible (scolarisation)",
                        },
                        "no": {
                            "next": "city_verification_young_no_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                        },
                    },
                },
                "city_verification_young_no_rsa": {
                    "next": "result",
                    "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                    "process": "extract_city",
                    "transitions": [
                        {
                            "condition": "city in ['saint-denis', 'pierrefitte', 'saint-ouen', 'epinay', '√©pinay', 'villetaneuse', 'ile-saint-denis', '√Æle-saint-denis']",
                            "next": "eligible_ml",
                            "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par la mission locale de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. <a href='https://code93.fr/rendezvous/formulaire_ml.php' target='_blank'>Cliquez ici </a> pour prendre un rendez-vous avec un conseiller",
                            "is_final": True,
                            "eligibility_result": "ML",
                        },
                        {
                            "condition": "True",
                            "next": "not_eligible_city",
                            "message": "Pour ton cas, je te recommande de contacter les services sociaux de ta ville ou de ton d√©partement pour explorer les dispositifs d'accompagnement disponibles localement.",
                            "is_final": True,
                            "eligibility_result": "Non √©ligible (ville)",
                        },
                    ],
                },
                "rsa_verification_adult": {
                    "next": "schooling_verification_adult",
                    "message": "√ätes-vous b√©n√©ficiaire du <b>RSA</b> (Revenu de Solidarit√© Active) ? C'est une aide sociale qui garantit un revenu minimum aux personnes sans ressources ou √† faibles revenus, vers√©e par la CAF ou la MSA.",
                    "responses": {
                        "yes": {
                            "next": "schooling_verification_adult_rsa",
                            "message": "D'accord, tu es scolaris√©?",
                        },
                        "no": {
                            "next": "schooling_verification_adult_no_rsa",
                            "message": "D'accord, tu es scolaris√©?",
                        },
                    },
                },
                "schooling_verification_adult_rsa": {
                    "next": "city_verification_adult_rsa",
                    "message": "D'accord, tu es scolaris√©?",
                    "responses": {
                        "yes": {
                            "next": "city_verification_adult_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                        },
                        "no": {
                            "next": "city_verification_adult_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                        },
                    },
                },
                "city_verification_adult_rsa": {
                    "next": "result",
                    "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                    "process": "extract_city",
                    "transitions": [
                        {
                            "condition": "city in ['saint-denis', 'stains', 'pierrefitte']",
                            "next": "eligible_ali",
                            "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par l'agence locale d'insertion de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. <a href='https://code93.fr/rendezvous/formulaire_ali.php' target='_blank'>Cliquez ici</a> pour prendre un rendez-vous avec un conseiller",
                            "is_final": True,
                            "eligibility_result": "ALI",
                        },
                        {
                            "condition": "True",
                            "next": "not_eligible_city",
                            "message": "Pour ton cas, je te recommande de contacter les services sociaux de ta ville ou de ton d√©partement pour explorer les dispositifs d'accompagnement disponibles localement.",
                            "is_final": True,
                            "eligibility_result": "Non √©ligible (ville)",
                        },
                    ],
                },
                "schooling_verification_adult_no_rsa": {
                    "next": "city_verification_adult_no_rsa",
                    "message": "D'accord, tu es scolaris√©?",
                    "responses": {
                        "yes": {
                            "next": "city_verification_adult_no_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                        },
                        "no": {
                            "next": "city_verification_adult_no_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                        },
                    },
                },
                "city_verification_adult_no_rsa": {
                    "next": "result",
                    "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                    "process": "extract_city",
                    "transitions": [
                        {
                            "condition": "city in ['aubervilliers', 'epinay-sur-seine', '√©pinay-sur-seine', 'ile-saint-denis', '√Æle-saint-denis', 'la-courneuve', 'la courneuve', 'pierrefitte', 'saint-denis', 'saint-ouen', 'stains', 'villetaneuse']",
                            "next": "eligible_plie",
                            "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par le PLIE de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. <a href='https://code93.fr/rendezvous/formulaire_plie.php' target='_blank'>Cliquez ici </a> pour prendre un rendez-vous avec un conseiller",
                            "is_final": True,
                            "eligibility_result": "PLIE",
                        },
                        {
                            "condition": "True",
                            "next": "not_eligible_city",
                            "message": "Pour ton cas, je te recommande de contacter les services sociaux de ta ville ou de ton d√©partement pour explorer les dispositifs d'accompagnement disponibles localement.",
                            "is_final": True,
                            "eligibility_result": "Non √©ligible (ville)",
                        },
                    ],
                },
                "eligible_ali": {
                    "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par l'agence locale d'insertion de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. <a href='https://code93.fr/rendezvous/formulaire_ali.php' target='_blank'>Cliquez ici </a> pour prendre un rendez-vous avec un conseiller",
                    "is_final": True,
                    "eligibility_result": "ALI",
                },
                "eligible_ml": {
                    "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par la mission locale de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. <a href='https://code93.fr/rendezvous/formulaire_ml.php' target='_blank'>Cliquez ici </a> pour prendre un rendez-vous avec un conseiller",
                    "is_final": True,
                    "eligibility_result": "ML",
                },
                "eligible_plie": {
                    "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par le PLIE de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. <a href='https://code93.fr/rendezvous/formulaire_plie.php' target='_blank'>Cliquez ici </a> pour prendre un rendez-vous avec un conseiller",
                    "is_final": True,
                    "eligibility_result": "PLIE",
                },
                "not_eligible_age": {
                    "message": "Je suis d√©sol√©, mais vous ne remplissez pas les crit√®res d'√¢ge pour √™tre √©ligible aux programmes.",
                    "is_final": True,
                    "eligibility_result": "Non √©ligible (√¢ge)",
                },
                "not_eligible_city": {
                    "message": "Pour ton cas, je te recommande de contacter les services sociaux de ta ville ou de ton d√©partement pour explorer les dispositifs d'accompagnement disponibles localement.",
                    "is_final": True,
                    "eligibility_result": "Non √©ligible (ville)",
                },
                "not_eligible_schooling": {
                    "message": "Je suis d√©sol√©, mais vous n'√™tes pas √©ligible aux programmes avec votre statut de scolarisation actuel.",
                    "is_final": True,
                    "eligibility_result": "Non √©ligible (scolarisation)",
                },
            }
        }

    def calculate_similarity(self, str1, str2):
        """
        Calcule la similarit√© entre deux cha√Ænes de caract√®res (distance de Levenshtein normalis√©e)
        Retourne un pourcentage de similarit√© entre 0 et 100
        """
        # Normaliser les cha√Ænes
        str1 = str1.lower().strip()
        str2 = str2.lower().strip()

        # Si les cha√Ænes sont identiques, retourner 100%
        if str1 == str2:
            return 100

        # Si l'une des cha√Ænes est vide, la distance est √©gale √† la longueur de l'autre cha√Æne
        if len(str1) == 0 or len(str2) == 0:
            return 0

        # Initialisation de la matrice
        matrix = [[0 for x in range(len(str2) + 1)] for x in range(len(str1) + 1)]

        # Remplissage de la premi√®re ligne et de la premi√®re colonne
        for i in range(len(str1) + 1):
            matrix[i][0] = i
        for j in range(len(str2) + 1):
            matrix[0][j] = j

        # Calcul de la distance de Levenshtein
        for i in range(1, len(str1) + 1):
            for j in range(1, len(str2) + 1):
                cost = 0 if str1[i - 1] == str2[j - 1] else 1
                matrix[i][j] = min(
                    matrix[i - 1][j] + 1,  # Suppression
                    matrix[i][j - 1] + 1,  # Insertion
                    matrix[i - 1][j - 1] + cost,  # Substitution
                )

        # La distance de Levenshtein est la valeur dans le coin inf√©rieur droit de la matrice
        distance = matrix[len(str1)][len(str2)]

        # Normaliser la distance pour obtenir un pourcentage de similarit√©
        max_length = max(len(str1), len(str2))
        similarity = (1 - distance / max_length) * 100

        return similarity

    def find_closest_city(self, city_input, city_list, similarity_threshold=60):
        """
        Trouve la ville la plus proche dans la liste si elle d√©passe le seuil de similarit√©

        Args:
            city_input (str): Nom de ville saisi par l'utilisateur
            city_list (list): Liste des noms de villes valides
            similarity_threshold (int): Seuil de similarit√© en pourcentage (d√©faut: 60%)

        Returns:
            tuple: (ville la plus proche, score de similarit√©) ou (None, 0) si aucune correspondance
        """
        if not city_input or not city_list:
            return None, 0

        max_similarity = 0
        closest_city = None

        for city in city_list:
            similarity = self.calculate_similarity(city_input, city)
            if similarity > max_similarity:
                max_similarity = similarity
                closest_city = city

        # Retourner la ville la plus proche si elle d√©passe le seuil
        if max_similarity >= similarity_threshold:
            return closest_city, max_similarity

        return None, 0

    def evaluate(self, conversation_id, current_state, nlp_data=None, user_data=None):
        """
        √âvaluer l'√©tat actuel et d√©terminer la prochaine √©tape

        Args:
            conversation_id (str): ID de la conversation
            current_state (str): √âtat actuel dans l'arbre d√©cisionnel
            nlp_data (dict): R√©sultats du traitement NLP
            user_data (dict): Donn√©es utilisateur collect√©es jusqu'√† pr√©sent

        Returns:
            dict: Informations sur la prochaine √©tape
        """
        print(
            f"\nEvaluating - conversation_id: {conversation_id}, current_state: {current_state}"
        )
        if nlp_data:
            print(f"NLP data: {json.dumps(nlp_data)}")
        if user_data:
            print(f"User data: {json.dumps(user_data)}")

        # Debug: Afficher l'√©tat actuel des donn√©es utilisateur
        if conversation_id in self.user_data:
            print(
                f"DEBUG - Current user data: {json.dumps(self.user_data[conversation_id])}"
            )

        # Mettre √† jour les donn√©es utilisateur
        if user_data:
            if conversation_id not in self.user_data:
                self.user_data[conversation_id] = {}
            self.user_data[conversation_id].update(user_data)

        # Obtenir la d√©finition de l'√©tat actuel
        state_def = self.rules["states"].get(current_state)

        if not state_def:
            print(f"√âtat non reconnu dans l'arbre de d√©cision: {current_state}")
            return {
                "next_state": "error",
                "message": "√âtat non reconnu dans l'arbre de d√©cision.",
                "is_final": False,
            }

        print(f"√âtat actuel: {current_state}, d√©finition: {json.dumps(state_def)}")

        # Traiter la logique d'√©tat sp√©ciale si n√©cessaire
        if "process" in state_def:
            process_type = state_def["process"]
            print(f"Traitement sp√©cial requis: {process_type}")

            # Utiliser √† la fois nlp_data et user_data pour le traitement
            combined_data = {}
            if user_data:
                combined_data.update(user_data)

            # Le traitement peut ajouter de nouvelles donn√©es
            process_result = self._process_special_logic(
                process_type, nlp_data, combined_data
            )

            print(f"R√©sultats du traitement: {json.dumps(process_result)}")

            # V√©rifier si le traitement a r√©ussi √† extraire l'information requise
            if process_type == "extract_age" and "age" not in process_result:
                # L'√¢ge n'a pas pu √™tre extrait, redemander
                return {
                    "next_state": current_state,  # Rester dans le m√™me √©tat
                    "message": "Je n'ai pas compris votre √¢ge. Pourriez-vous me dire quel √¢ge vous avez, en chiffres (par exemple 25) ou en lettres (par exemple trente ans) ?",
                    "is_final": False,
                }
            elif process_type == "extract_city":
                if "out_of_zone" in process_result:
                    ville = process_result.get("mentioned_city", "mentionn√©e")
                    return {
                        "next_state": "not_eligible_city",  # Passer directement √† l'√©tat non √©ligible
                        "message": f"‚ö†Ô∏è Important : Mon p√©rim√®tre d'action est limit√© √† la Plaine Commune et au d√©partement de la Seine-Saint-Denis (93). La ville de {ville} est en dehors de ma zone d'intervention. Pour ton cas, je te recommande de contacter les services de ta ville ou de ton d√©partement.",
                        "is_final": True,
                        "eligibility_result": "Non √©ligible (ville hors p√©rim√®tre)",
                    }

                # G√©rer le cas o√π une ville similaire est d√©tect√©e et n√©cessite confirmation
                if "city_needs_confirmation" in process_result:
                    suggested_city = process_result.get("suggested_city")
                    user_input = process_result.get("user_input")
                    similarity_score = process_result.get("similarity_score", 0)

                    # Formatage du score pour l'affichage
                    similarity_formatted = f"{similarity_score:.1f}"

                    confirmation_message = (
                        f'Vous avez indiqu√© "{user_input}". '
                        f'Souhaitez-vous dire "{suggested_city}" ? '
                        f"(Score de similarit√©: {similarity_formatted}%)\n\n"
                        f'Veuillez confirmer par "oui" ou "non".'
                    )

                    print(
                        f"Demande de confirmation pour la ville similaire: {suggested_city}"
                    )

                    # Cr√©er un √©tat temporaire pour la confirmation de la ville
                    temp_state = f"{current_state}_city_confirmation"

                    # Stocker la ville sugg√©r√©e pour r√©f√©rence future
                    if conversation_id not in self.user_data:
                        self.user_data[conversation_id] = {}
                    self.user_data[conversation_id]["suggested_city"] = suggested_city

                    return {
                        "next_state": temp_state,
                        "message": confirmation_message,
                        "is_final": False,
                    }

            # Mettre √† jour les donn√©es utilisateur avec les r√©sultats du traitement
            if conversation_id not in self.user_data:
                self.user_data[conversation_id] = {}
            self.user_data[conversation_id].update(process_result)

            # Si user_data est fourni, mettre √† jour combined_data
            combined_data.update(process_result)

            # G√©rer les transitions bas√©es sur le traitement
            if "transitions" in state_def:
                print(f"√âvaluation des transitions...")
                for transition in state_def["transitions"]:
                    condition = transition["condition"]
                    print(f"V√©rification de la condition: {condition}")

                    # √âvaluer la condition avec les donn√©es combin√©es
                    if self._evaluate_condition(condition, combined_data):
                        print(
                            f"Condition satisfaite! Transition vers: {transition['next']}"
                        )
                        return {
                            "next_state": transition["next"],
                            "message": transition["message"],
                            "is_final": transition.get("is_final", False),
                            "eligibility_result": transition.get("eligibility_result"),
                        }
                    else:
                        print(f"Condition non satisfaite.")

        # G√©rer sp√©cifiquement les √©tats de confirmation de ville
        if "_city_confirmation" in current_state:
            text = nlp_data.get("text", "").lower() if nlp_data else ""
            intent = nlp_data.get("intent", "").lower() if nlp_data else ""

            # R√©cup√©rer la ville sugg√©r√©e stock√©e pr√©c√©demment
            suggested_city = self.user_data.get(conversation_id, {}).get(
                "suggested_city"
            )

            # D√©terminer si l'utilisateur a confirm√© ou non
            confirmed = False
            if (
                intent in ["yes", "affirm", "agree"]
                or "oui" in text
                or "d'accord" in text
                or "ok" in text
            ):
                confirmed = True
            elif intent in ["no", "deny", "disagree"] or "non" in text or "pas" in text:
                confirmed = False
            else:
                # Si la r√©ponse est ambigu√´, demander √† nouveau
                return {
                    "next_state": current_state,
                    "message": "Je n'ai pas compris votre r√©ponse. Veuillez r√©pondre par 'oui' si vous souhaitiez bien dire \""
                    + str(suggested_city)
                    + "\", ou 'non' dans le cas contraire.",
                    "is_final": False,
                }

            # Extraire le state de base (sans "_city_confirmation")
            base_state = current_state.replace("_city_confirmation", "")

            if confirmed:
                # Si l'utilisateur confirme, utiliser la ville sugg√©r√©e
                if conversation_id not in self.user_data:
                    self.user_data[conversation_id] = {}
                self.user_data[conversation_id]["city"] = suggested_city

                print(f"Utilisateur a confirm√© la ville: {suggested_city}")

                # Continuer avec l'arbre de d√©cision normal
                state_def = self.rules["states"].get(base_state)
                if state_def and "transitions" in state_def:
                    for transition in state_def["transitions"]:
                        condition = transition["condition"]

                        # Pr√©parer les donn√©es pour l'√©valuation
                        eval_data = {}
                        if user_data:
                            eval_data.update(user_data)
                        eval_data["city"] = suggested_city

                        # √âvaluer la condition avec les donn√©es mises √† jour
                        if self._evaluate_condition(condition, eval_data):
                            return {
                                "next_state": transition["next"],
                                "message": transition["message"],
                                "is_final": transition.get("is_final", False),
                                "eligibility_result": transition.get(
                                    "eligibility_result"
                                ),
                            }

                # Si aucune transition ne correspond, utiliser la transition par d√©faut
                return {
                    "next_state": "not_eligible_city",
                    "message": "Pour ton cas, je te recommande de contacter les services sociaux de ta ville ou de ton d√©partement pour explorer les dispositifs d'accompagnement disponibles localement.",
                    "is_final": True,
                    "eligibility_result": "Non √©ligible (ville)",
                }
            else:
                # Si l'utilisateur ne confirme pas, lui demander √† nouveau la ville
                return {
                    "next_state": base_state,
                    "message": "D'accord. Pourriez-vous pr√©ciser √† nouveau le nom de votre ville ou votre code postal ?",
                    "is_final": False,
                }

        # V√©rification RSA dans les √©tats concern√©s
        if "rsa_verification" in current_state:
            text = nlp_data.get("text", "").lower() if nlp_data else ""
            intent = nlp_data.get("intent", "").lower() if nlp_data else ""
            rsa_detected = False

            # D√©tection explicite de la r√©ponse "non"
            if "non" in text or intent == "no":
                # Forcer RSA √† False
                if conversation_id not in self.user_data:
                    self.user_data[conversation_id] = {}
                self.user_data[conversation_id]["rsa"] = False
                rsa_detected = True

                # Forcer la transition vers l'√©tat appropri√©
                if current_state == "rsa_verification_young":
                    print(
                        "*** Transition forc√©e vers schooling_verification_young_no_rsa ***"
                    )
                    return {
                        "next_state": "schooling_verification_young_no_rsa",
                        "message": "D'accord, tu es scolaris√©?",
                        "is_final": False,
                    }
            # D√©tection explicite de la r√©ponse "oui"
            elif "oui" in text or intent == "yes" or "d'accord" in text or "ok" in text:
                # Forcer RSA √† True
                if conversation_id not in self.user_data:
                    self.user_data[conversation_id] = {}
                self.user_data[conversation_id]["rsa"] = True
                rsa_detected = True

                # Forcer la transition vers l'√©tat appropri√©
                if current_state == "rsa_verification_young":
                    print(
                        "*** Transition forc√©e vers schooling_verification_young_rsa ***"
                    )
                    return {
                        "next_state": "schooling_verification_young_rsa",
                        "message": "D'accord, tu es scolaris√©?",
                        "is_final": False,
                    }

            # Si les donn√©es RSA sont d√©j√† pr√©sentes mais pas d√©tect√©es dans le texte
            if not rsa_detected and "rsa" in self.user_data.get(conversation_id, {}):
                rsa_value = self.user_data[conversation_id]["rsa"]
                print(f"*** Utilisation de la valeur RSA existante: {rsa_value} ***")

                if current_state == "rsa_verification_young":
                    next_state = (
                        "schooling_verification_young_rsa"
                        if rsa_value
                        else "schooling_verification_young_no_rsa"
                    )
                    return {
                        "next_state": next_state,
                        "message": "D'accord, tu es scolaris√©?",
                        "is_final": False,
                    }

        # G√©rer les r√©ponses directes si pr√©sentes
        if nlp_data and "responses" in state_def:
            intent = nlp_data.get("intent", "").lower()
            text = nlp_data.get("text", "").lower() if nlp_data else ""
            print(f"V√©rification des r√©ponses pour l'intention: {intent}")

            # V√©rifier les intentions oui/non
            if (
                intent in ["yes", "affirm", "agree"]
                or "oui" in text.lower()
                or "d'accord" in text.lower()
                or "ok" in text.lower()
            ):
                if "yes" in state_def["responses"]:
                    response = state_def["responses"]["yes"]
                    print(
                        f"R√©ponse 'oui' d√©tect√©e, transition vers: {response['next']}"
                    )
                    return {
                        "next_state": response["next"],
                        "message": response["message"],
                        "is_final": response.get("is_final", False),
                        "eligibility_result": response.get("eligibility_result"),
                    }
            elif (
                intent in ["no", "deny", "disagree"]
                or "non" in text.lower()
                or "pas" in text.lower()
            ):
                if "no" in state_def["responses"]:
                    response = state_def["responses"]["no"]
                    print(
                        f"R√©ponse 'non' d√©tect√©e, transition vers: {response['next']}"
                    )
                    return {
                        "next_state": response["next"],
                        "message": response["message"],
                        "is_final": response.get("is_final", False),
                        "eligibility_result": response.get("eligibility_result"),
                    }
            else:
                # Si nous sommes dans un √©tat qui attend une r√©ponse oui/non mais qu'on n'a pas pu l'interpr√©ter
                if "yes" in state_def["responses"] and "no" in state_def["responses"]:
                    return {
                        "next_state": current_state,  # Rester dans le m√™me √©tat
                        "message": "Je n'ai pas compris votre r√©ponse. Pourriez-vous r√©pondre simplement par oui ou par non ?",
                        "is_final": False,
                    }

        # Rechercher d'autres entit√©s dans les donn√©es
        if nlp_data and "entities" in nlp_data:
            entities = nlp_data["entities"]

            # Traitement sp√©cial pour l'√¢ge si nous sommes dans l'√©tat age_verification
            if current_state == "age_verification" and "age" in entities:
                age = entities["age"]
                print(f"√Çge d√©tect√©: {age}")

                # D√©terminer la prochaine √©tape en fonction de l'√¢ge
                if age < 16:
                    return {
                        "next_state": "not_eligible_age",
                        "message": "Je suis d√©sol√©, mais vous devez avoir au moins 16 ans pour √™tre √©ligible aux programmes.",
                        "is_final": True,
                        "eligibility_result": "Non √©ligible (√¢ge)",
                    }
                elif age <= 25.5:
                    return {
                        "next_state": "rsa_verification_young",
                        "message": "√ätes-vous b√©n√©ficiaire du <b>RSA</b> (Revenu de Solidarit√© Active) ? C'est une aide sociale qui garantit un revenu minimum aux personnes sans ressources ou √† faibles revenus, vers√©e par la CAF ou la MSA.",
                        "is_final": False,
                    }
                elif age < 64:
                    return {
                        "next_state": "rsa_verification_adult",
                        "message": "√ätes-vous b√©n√©ficiaire du <b>RSA</b> (Revenu de Solidarit√© Active) ? C'est une aide sociale qui garantit un revenu minimum aux personnes sans ressources ou √† faibles revenus, vers√©e par la CAF ou la MSA.",
                        "is_final": False,
                    }
                else:
                    return {
                        "next_state": "not_eligible_age",
                        "message": "Je suis d√©sol√©, mais vous devez avoir moins de 64 ans pour √™tre √©ligible aux programmes.",
                        "is_final": True,
                        "eligibility_result": "Non √©ligible (√¢ge)",
                    }
            # G√©rer le cas o√π on est dans l'√©tat age_verification mais qu'on n'a pas d√©tect√© l'√¢ge
            elif current_state == "age_verification" and "age" not in entities:
                return {
                    "next_state": current_state,  # Rester dans le m√™me √©tat
                    "message": "Je n'ai pas compris votre √¢ge. Pourriez-vous me dire quel √¢ge vous avez en chiffres ?",
                    "is_final": False,
                }

            # V√©rification scolarisation dans les √©tats concern√©s
            if "schooling_verification" in current_state:
                schooling_detected = False
                text = nlp_data.get("text", "").lower() if nlp_data else ""
                intent = nlp_data.get("intent", "").lower() if nlp_data else ""

                if "schooling" in entities:
                    schooling_detected = True
                elif intent == "yes" or "oui" in text:
                    # Ajouter scolarisation aux donn√©es utilisateur si oui d√©tect√©
                    if conversation_id not in self.user_data:
                        self.user_data[conversation_id] = {}
                    self.user_data[conversation_id]["schooling"] = True
                    schooling_detected = True
                elif intent == "no" or "non" in text or "pas" in text:
                    # Ajouter scolarisation aux donn√©es utilisateur si non d√©tect√©
                    if conversation_id not in self.user_data:
                        self.user_data[conversation_id] = {}
                    self.user_data[conversation_id]["schooling"] = False
                    schooling_detected = True

                    # Traitement sp√©cial pour jeune sans RSA et non scolaris√©
                    if current_state == "schooling_verification_young_no_rsa":
                        print("*** D√©tect√©: jeune, sans RSA, non scolaris√© ***")
                        return {
                            "next_state": "city_verification_young_no_rsa",
                            "message": "Pour mieux t'aider, peux tu me pr√©ciser ton code postal ou le nom de ta ville?",
                            "is_final": False,
                        }

                if not schooling_detected:
                    # Scolarisation non d√©tect√©e alors qu'on est dans un √©tat qui l'attend
                    return {
                        "next_state": current_state,  # Rester dans le m√™me √©tat
                        "message": "Je n'ai pas compris si vous √™tes actuellement scolaris√©. Pourriez-vous r√©pondre simplement par oui ou par non ?",
                        "is_final": False,
                    }

            # V√©rification ville dans les √©tats concern√©s
            if "city_verification" in current_state:
                # Utiliser la fonction find_city_from_text du module city_variants
                text = nlp_data.get("text", "").lower() if nlp_data else ""

                # Essayer d'abord de trouver une ville dans le texte
                city_name = find_city_from_text(text)

                if city_name:
                    # Ajouter la ville aux donn√©es utilisateur
                    if conversation_id not in self.user_data:
                        self.user_data[conversation_id] = {}
                    self.user_data[conversation_id]["city"] = city_name

                    # Traitement sp√©cifique pour jeune non RSA non scolaris√©
                    if current_state == "city_verification_young_no_rsa":
                        ml_cities = [
                            "saint-denis",
                            "pierrefitte",
                            "saint-ouen",
                            "√©pinay-sur-seine",
                            "villetaneuse",
                            "√Æle-saint-denis",
                        ]

                        if city_name in ml_cities:
                            print(
                                f"*** Ville ML d√©tect√©e via city_variants: {city_name} ***"
                            )
                            return {
                                "next_state": "eligible_ml",
                                "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par la mission locale de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. <a href='https://code93.fr/rendezvous/formulaire_ml.php' target='_blank'>Cliquez ici </a> pour prendre un rendez-vous avec un conseiller",
                                "is_final": True,
                                "eligibility_result": "ML",
                            }

        # V√©rifier si toutes les conditions sont remplies pour ML et appliquer un override
        if conversation_id in self.user_data:
            user_data = self.user_data[conversation_id]

            # Cas sp√©cifique: jeune (16-25.5) sans RSA, non scolaris√©, habitant dans une ville ML
            if (
                user_data.get("age", 0) >= 16
                and user_data.get("age", 0) <= 25.5
                and user_data.get("rsa") is False
                and user_data.get("schooling") is False
                and "city" in user_data
                and normalize_city_name(user_data["city"].lower())
                in [
                    "saint-denis",
                    "pierrefitte",
                    "saint-ouen",
                    "√©pinay-sur-seine",
                    "villetaneuse",
                    "√Æle-saint-denis",
                ]
            ):

                print("*** CONDITIONS ML D√âTECT√âES - OVERRIDE APPLIQU√â ***")
                return {
                    "next_state": "eligible_ml",
                    "message": "üéâ Bonne nouvelle ! üéâ Tu es √©ligible √† un accompagnement personnalis√© par la mission locale de ta ville ! üôå Cela peut t'aider √† trouver des opportunit√©s professionnelles, recevoir des conseils et bien plus. <a href='https://code93.fr/rendezvous/formulaire_ml.php' target='_blank'>Cliquez ici </a> pour prendre un rendez-vous avec un conseiller",
                    "is_final": True,
                    "eligibility_result": "ML",
                }

        # √âtat suivant par d√©faut - si on arrive ici, c'est qu'on n'a pas pu interpr√©ter la r√©ponse
        # Redemander en fonction de l'√©tat actuel
        if "age_verification" in current_state:
            return {
                "next_state": current_state,
                "message": "Je n'ai pas compris votre √¢ge. Pourriez-vous me donner votre √¢ge en chiffres, par exemple 25 ?",
                "is_final": False,
            }
        elif "rsa_verification" in current_state:
            return {
                "next_state": current_state,
                "message": "Je n'ai pas compris si vous √™tes b√©n√©ficiaire du RSA. Pouvez-vous r√©pondre simplement par oui ou par non ?",
                "is_final": False,
            }
        elif "schooling_verification" in current_state:
            return {
                "next_state": current_state,
                "message": "Je n'ai pas compris si vous √™tes actuellement scolaris√©. Pouvez-vous r√©pondre simplement par oui ou par non ?",
                "is_final": False,
            }
        elif "city_verification" in current_state:
            return {
                "next_state": current_state,
                "message": "Je n'ai pas reconnu cette ville. Pourriez-vous pr√©ciser dans quelle ville vous habitez ? Par exemple : Saint-Denis, Stains, Pierrefitte, etc.",
                "is_final": False,
            }
        else:
            # Transition par d√©faut g√©n√©rique
            print(f"Transition par d√©faut vers: {state_def.get('next', current_state)}")
            return {
                "next_state": state_def.get("next", current_state),
                "message": state_def.get("message", "Comment puis-je vous aider ?"),
                "is_final": state_def.get("is_final", False),
                "eligibility_result": state_def.get("eligibility_result"),
            }

    def get_rules(self):
        """Retourner les r√®gles actuelles"""
        return self.rules

    def _process_special_logic(self, process_type, nlp_data, existing_data=None):
        """Traiter la logique sp√©ciale bas√©e sur le type de processus"""
        result = {}
        if existing_data:
            result.update(existing_data)

        if process_type == "extract_age":
            # D'abord v√©rifier si l'√¢ge est d√©j√† dans les donn√©es existantes
            if existing_data and "age" in existing_data:
                print(f"√Çge d√©j√† pr√©sent dans les donn√©es: {existing_data['age']}")
                result["age"] = existing_data["age"]
                return result

            # Sinon, extraire l'√¢ge des donn√©es NLP ou du message utilisateur
            text = nlp_data.get("text", "").lower() if nlp_data else ""
            entities = nlp_data.get("entities", {})

            # V√©rifier si l'√¢ge est dans un contexte de code postal
            if (
                "ville" in text
                or "habite" in text
                or "code" in text
                or "postal" in text
            ) and re.search(r"93\s*\d{3}", text):
                print(f"D√©tection d'un code postal, pas d'un √¢ge")
                return result

            # Extraire l'√¢ge des entit√©s ou du texte
            if "age" in entities:
                age = entities["age"]
                result["age"] = age
                print(f"√Çge extrait des entit√©s NLP: {age}")
            else:
                # Essayer d'extraire du texte brut
                print(f"Tentative d'extraction d'√¢ge du texte: '{text}'")
                try:
                    # Trouver le premier nombre dans le texte
                    age_match = re.search(r"\b\d+\b", text)
                    if age_match:
                        age = int(age_match.group())
                        result["age"] = age
                        print(f"√Çge extrait du texte (chiffres): {age}")
                    else:
                        # Dictionnaire des nombres en lettres
                        number_words = {
                            "seize": 16,
                            "16 ans": 16,
                            "dix-sept": 17,
                            "dix sept": 17,
                            "dixsept": 17,
                            "17 ans": 17,
                            "dix-huit": 18,
                            "dix huit": 18,
                            "dixhuit": 18,
                            "18 ans": 18,
                            "dix-neuf": 19,
                            "dix neuf": 19,
                            "dixneuf": 19,
                            "19 ans": 19,
                            "vingt": 20,
                            "20 ans": 20,
                            "vingt et un": 21,
                            "vingt-et-un": 21,
                            "21 ans": 21,
                            # ... (autres nombres)
                        }

                        for word, value in number_words.items():
                            if word in text:
                                result["age"] = value
                                print(f"√Çge extrait du texte (mots): {value}")
                                break

                except Exception as e:
                    print(f"Erreur lors de l'extraction d'√¢ge: {str(e)}")

        elif process_type == "extract_city":
            # D'abord v√©rifier si la ville est d√©j√† dans les donn√©es existantes
            if existing_data and "city" in existing_data:
                print(f"Ville d√©j√† pr√©sente dans les donn√©es: {existing_data['city']}")
                result["city"] = existing_data["city"].lower()
                return result

            # Extraire la ville des donn√©es NLP
            text = nlp_data.get("text", "").lower() if nlp_data else ""

            # Liste des villes hors 93
            villes_hors_93 = [
                "paris",
                "marseille",
                "lyon",
                "toulouse",
                "nice",
                "nantes",
                "strasbourg",
                "montpellier",
                "bordeaux",
                "lille",
                "rennes",
                "reims",
                "toulon",
                "grenoble",
                "dijon",
                "angers",
                "n√Æmes",
                "villeurbanne",
                "le havre",
                "clermont-ferrand",
                "brest",
                "limoges",
                "tours",
                "amiens",
                "courbevoie",
                "nanterre",
                "boulogne",
                "versailles",
                "cergy",
                "poissy",
                "sarcelles",
                "argenteuil",
                "asni√®res",
                "colombes",
                "cr√©teil",
                "vitry",
                "evry",
                "meaux",
                "melun",
                "fontainebleau",
                "provins",
                "mantes",
                "neuilly",
                "puteaux",
            ]

            # V√©rifier si le texte contient un code postal hors 93
            postcode_match = re.search(r"\b(\d{5})\b", text)
            if postcode_match:
                code = postcode_match.group(1)
                if code and not code.startswith("93"):
                    result["out_of_zone"] = True
                    result["mentioned_city"] = code
                    print(f"Code postal hors zone d√©tect√©: {code}")
                    return result

            # V√©rifier si le texte contient explicitement une ville hors 93
            for ville in villes_hors_93:
                if ville in text:
                    result["out_of_zone"] = True
                    result["mentioned_city"] = ville
                    print(f"Ville hors zone d√©tect√©e: {ville}")
                    return result

            # 1. D'abord chercher dans notre base de donn√©es CITY_VARIANTS
            city_name = find_city_from_text(text)
            if city_name:
                result["city"] = city_name
                print(f"Ville extraite via find_city_from_text: {city_name}")
                return result

            # 2. Si pas trouv√©, essayer avec l'algorithme de similarit√©
            standard_cities = list(CITY_VARIANTS.keys())
            closest_city, similarity = self.find_closest_city(text, standard_cities, 60)

            if closest_city and similarity >= 60:
                # Une ville similaire a √©t√© trouv√©e
                result["city_needs_confirmation"] = True
                result["suggested_city"] = closest_city
                result["user_input"] = text
                result["similarity_score"] = similarity
                print(
                    f"Ville similaire d√©tect√©e: {closest_city} (score: {similarity:.2f}%)"
                )
                return result

            # 3. Si on a toujours rien, essayer d'extraire des entit√©s
            entities = nlp_data.get("entities", {})
            if "city" in entities:
                city = entities["city"].lower()

                # V√©rifier si c'est une ville hors zone
                for ville in villes_hors_93:
                    if ville in city:
                        result["out_of_zone"] = True
                        result["mentioned_city"] = ville
                        print(f"Ville hors zone d√©tect√©e via entit√©s: {ville}")
                        return result

                # Normaliser le nom de la ville
                normalized_city = normalize_city_name(city)
                if normalized_city:
                    result["city"] = normalized_city
                    print(
                        f"Ville extraite des entit√©s NLP: {city} -> {normalized_city}"
                    )
                    return result
                else:
                    # Si la ville n'est pas reconnue du tout
                    result["unrecognized_city"] = city
                    print(f"Ville non reconnue d√©tect√©e: {city}")
                    return result

        return result

    def _evaluate_condition(self, condition, data):
        """√âvaluer une condition par rapport aux donn√©es"""
        print(
            f"√âvaluation de la condition: '{condition}' avec les donn√©es: {json.dumps(data)}"
        )

        try:
            # Cas sp√©cial pour la condition "True"
            if condition == "True":
                return True

            # Cas sp√©cial pour v√©rifier si une valeur est dans une liste
            if " in " in condition and "[" in condition and "]" in condition:
                # Extraire la variable et la liste
                var_name, list_str = condition.split(" in ", 1)
                var_name = var_name.strip()

                if var_name in data:
                    # Normaliser la valeur entr√©e
                    value = data[var_name]
                    if var_name == "city" and isinstance(value, str):
                        value = value.lower()

                    # √âvaluer la liste (en supposant qu'elle est correctement format√©e)
                    try:
                        list_value = eval(list_str, {"__builtins__": {}})

                        # Pour les villes, on v√©rifie aussi les variantes
                        if var_name == "city":
                            # Normaliser la ville
                            normalized_city = normalize_city_name(value)
                            if not normalized_city:
                                normalized_city = value

                            print(f"Ville normalis√©e: '{value}' -> '{normalized_city}'")

                            # V√©rifier si la ville normalis√©e est dans la liste
                            for listed_city in list_value:
                                listed_city = str(listed_city).lower()

                                # V√©rification directe
                                if normalized_city == listed_city:
                                    return True

                                # V√©rifier dans les variantes connues
                                if (
                                    normalized_city in CITY_VARIANTS
                                    and listed_city in CITY_VARIANTS[normalized_city]
                                ):
                                    print(
                                        f"Ville '{normalized_city}' trouv√©e comme variante de '{listed_city}'"
                                    )
                                    return True

                                if (
                                    listed_city in CITY_VARIANTS
                                    and normalized_city in CITY_VARIANTS[listed_city]
                                ):
                                    print(
                                        f"Ville '{listed_city}' trouv√©e comme variante de '{normalized_city}'"
                                    )
                                    return True

                            # Derni√®re v√©rification directe dans la liste
                            if value in list_value:
                                return True

                            print(f"Ville '{value}' non trouv√©e dans la liste")
                            return False
                        else:
                            # Pour les autres types de donn√©es, simple v√©rification d'appartenance
                            return value in list_value
                    except Exception as e:
                        print(f"Erreur lors de l'√©valuation de la liste: {str(e)}")
                        return False
                else:
                    print(
                        f"Variable '{var_name}' requise pour l'√©valuation mais absente des donn√©es!"
                    )
                    return False

            # Cr√©er un environnement d'√©valuation s√©curis√© pour les autres conditions
            eval_context = {"__builtins__": {}}
            for key, val in data.items():
                eval_context[key] = val
                print(f"Variable ajout√©e au contexte: {key} = {val}")

            # V√©rifier si toutes les variables n√©cessaires sont pr√©sentes
            for var_name in re.findall(r"\b([a-zA-Z_]\w*)\b", condition):
                if var_name not in eval_context and var_name not in [
                    "True",
                    "False",
                    "and",
                    "or",
                    "not",
                    "in",
                ]:
                    print(
                        f"ATTENTION: Variable '{var_name}' requise dans la condition mais absente des donn√©es!"
                    )
                    return False

            # √âvaluer la condition dans un environnement s√©curis√©
            result = eval(condition, {"__builtins__": {}}, eval_context)
            print(f"R√©sultat de l'√©valuation: {result}")
            return result
        except Exception as e:
            print(f"Erreur lors de l'√©valuation de la condition: {str(e)}")
            if condition == "True":  # Fallback pour la condition "True"
                print(f"Condition 'True' √©valu√©e par d√©faut √† True")
                return True
            return False
